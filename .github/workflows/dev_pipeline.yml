name: ci_cd_pipeline_dev
on:
  push:
    branches: [ dev ]
env:
  FRONTEND_IMAGE_NAME: gcr.io/${{ secrets.GCP_PROJECT_ID }}/epistogram-frontend-dev:latest
  FRONTEND_CLOUD_RUN_SVC_NAME: epistogram-frontend-dev

  BACKEND_IMAGE_NAME: gcr.io/${{ secrets.GCP_PROJECT_ID }}/epistogram-backend-dev
  BACKEND_CLOUD_RUN_SVC_NAME: epistogram-backend-dev
  
  CLOUD_SQL_CONNCETION_NAME: gifted-country-324010:europe-central2:epistogram
  GCP_PROJECT_NAME: gifted-country-324010

jobs:
    
  # # BUILD FRONTEND
  # build_frontend:
  #   name: Build frontend
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Checkout branch
  #       uses: actions/checkout@v2
  #       with:
  #         ref: dev
        
  #     - name: Login to GCP
  #       uses: google-github-actions/setup-gcloud@v0
  #       with:
  #         project_id: ${{ secrets.GCP_PROJECT_ID }}
  #         service_account_email: ${{ secrets.GCP_EMAIL }}
  #         service_account_key: ${{ secrets.GCP_CREDENTIALS }}

  #     - name: Configure GCP Docker
  #       run: gcloud auth configure-docker --quiet
      
  #     - name: Set up Docker Buildx for layer caching
  #       id: buildx
  #       uses: docker/setup-buildx-action@master

  #     - name: Cache Docker layers
  #       uses: actions/cache@v2
  #       with:
  #         path: /tmp/.buildx-cache
  #         key: ${{ runner.os }}-single-buildx-${{ github.sha }}
  #         restore-keys: ${{ runner.os }}-single-buildx

  #     - name: Copy proper .env file
  #       run: cp -fr ./config/dev.env ./.env 
  #       working-directory: ./epistogram_frontend

  #     - name: Append additional values to .env file 
  #       run: |
  #         echo "" >> ./.env
  #         echo "REACT_APP_CURRENT_VERSION=`(date '+%Y.%m.%d.%H:%M')`" >> ./.env
  #         echo "REACT_APP_UNDER_MAINTENANCE=false" >> ./.env
  #       working-directory: ./epistogram_frontend

  #     - name: Build frontend container
  #       run: |
  #         docker buildx build ./epistogram_frontend \
  #         --cache-from type=local,src=/tmp/.buildx-cache \
  #         --cache-to type=local,dest=/tmp/.buildx-cache,mode=max \
  #         --builder ${{ steps.buildx.outputs.name }} \
  #         --tag $FRONTEND_IMAGE_NAME \
  #         --push

  # # BUILD BACKEND
  # build_backend: 
  #   name: Build backend
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Checkout branch
  #       uses: actions/checkout@v2
  #       with:
  #         ref: dev # references the target branch
        
  #     - name: Login to GCP
  #       uses: google-github-actions/setup-gcloud@v0
  #       with:
  #         project_id: ${{ secrets.GCP_PROJECT_ID }}
  #         service_account_email: ${{ secrets.GCP_EMAIL }}
  #         service_account_key: ${{ secrets.GCP_CREDENTIALS }}

  #     - name: Configure GCP Docker
  #       run: gcloud auth configure-docker --quiet
      
  #     - name: Set up Docker Buildx for layer caching
  #       id: buildx
  #       uses: docker/setup-buildx-action@master

  #     - name: Generate config.env file
  #       run: |
  #         echo \# ---- CONFIG FILE --- > config/config.env
  #         echo \# ---- gcp >> config/config.env
  #         echo BRANCH_NAME = dev >> config/config.env
  #         echo BACKEND_URL = api.dev.epistogram.com >> config/config.env
  #         echo MIN_INSTANCE_COUNT = 0 >> config/config.env
  #         echo IS_UNDER_MAINTENANCE = false >> config/config.env
  #         echo \# ---- misc >> config/config.env
  #         echo DOMAIN_TEMPLATE = https://dev.[DOMAIN] >> config/config.env
  #         echo ENVIRONMENT_NAME = dev >> config/config.env
  #         echo HOST_PORT = 5000 >> config/config.env
  #         echo JWT_SIGN_SECRET = ${{secrets.JWT_SIGN_SECRET}} >> config/config.env
  #         echo IS_HOSTED_ON_GCP = true >> config/config.env
  #         echo IS_LOCALHOST = false >> config/config.env
  #         echo VIDEO_COMPLETED_PERCENTAGE = 5 >> config/config.env
  #         echo \# ---- fileStorage >> config/config.env
  #         echo FILE_STORAGE_URL = https://storage.googleapis.com/epistogram_bucket_dev >> config/config.env
  #         echo FILE_STORAGE_BUCKET_NAME = epistogram_bucket_dev >> config/config.env
  #         echo \# ---- mail >> config/config.env
  #         echo MAIL_TOKEN_SECRET = ${{secrets.MAIL_TOKEN_SECRET}} >> config/config.env
  #         echo MAIL_HOST = smtp.sendgrid.net >> config/config.env
  #         echo MAIL_SENDER_MAIL = ${{secrets.MAIL_SENDER_MAIL}} >> config/config.env
  #         echo MAIL_SENDER_PASSWORD = ${{secrets.MAIL_SENDER_PASSWORD}} >> config/config.env
  #         echo \# ---- database >> config/config.env
  #         echo DB_NAME = epistogram_DEV >> config/config.env
  #         echo DB_HOST_ADDRESS = ${{secrets.DB_HOST_ADDRESS}} >> config/config.env
  #         echo DB_PORT = ${{secrets.DB_PORT}} >> config/config.env
  #         echo DB_SERVICE_USER_NAME = ${{secrets.DB_SERVICE_USER_NAME}} >> config/config.env
  #         echo DB_SERVICE_USER_PASSWORD = ${{secrets.DB_SERVICE_USER_PASSWORD}} >> config/config.env
  #         echo DB_IS_ORM_LOGGING_ENABLED = true >> config/config.env
  #       working-directory: ./epistogram_backend

  #     - name: Build backend container
  #       run: |
  #         docker buildx build ./epistogram_backend \
  #         --builder ${{ steps.buildx.outputs.name }} \
  #         --tag $BACKEND_IMAGE_NAME \
  #         --push
  
  # # DEPLOY FRONTEND
  # deploy_frontend:
  #   name: Deploy frontend
  #   runs-on: ubuntu-latest
  #   needs: [build_backend, build_frontend]
    
  #   steps:  
  #     - name: Login to GCP
  #       uses: google-github-actions/setup-gcloud@v0
  #       with:
  #         project_id: ${{ secrets.GCP_PROJECT_ID }}
  #         service_account_email: ${{ secrets.GCP_EMAIL }}
  #         service_account_key: ${{ secrets.GCP_CREDENTIALS }}

  #     - name: Configure GCP Docker
  #       run: gcloud auth configure-docker --quiet

  #     - name: Deploy Docker image to GCP CloudRun
  #       run: |
  #         gcloud run deploy $FRONTEND_CLOUD_RUN_SVC_NAME \
  #         --image $FRONTEND_IMAGE_NAME \
  #         --region europe-west1 \
  #         --platform managed \
  #         --max-instances 1 \
  #         --port 80 \
  #         --allow-unauthenticated 

  # # DEPLOY BACKEND
  # deploy_backend:
  #   name: Deploy backend
  #   runs-on: ubuntu-latest
  #   needs: [build_backend, build_frontend]

  #   steps:
  #     - name: Login to GCP
  #       uses: google-github-actions/setup-gcloud@v0
  #       with:
  #         project_id: ${{ secrets.GCP_PROJECT_ID }}
  #         service_account_email: ${{ secrets.GCP_EMAIL }}
  #         service_account_key: ${{ secrets.GCP_CREDENTIALS }}

  #     - name: Configure GCP Docker
  #       run: gcloud auth configure-docker --quiet
        
  #     - name: Deploy Docker image to GCP CloudRun
  #       run: |
  #         gcloud run deploy $BACKEND_CLOUD_RUN_SVC_NAME \
  #         --image $BACKEND_IMAGE_NAME \
  #         --add-cloudsql-instances $CLOUD_SQL_CONNCETION_NAME \
  #         --region europe-west1 \
  #         --platform managed \
  #         --max-instances 1 \
  #         --min-instances 0 \
  #         --port 5000 \
  #         --allow-unauthenticated \
  #         --memory 4Gi \
  #         --cpu 2 \
  #         --concurrency 200

  # # DEPLOY JOB SCHEDULER
  # deploy_job_scheduler: 
  #   name: Deploy job scheduler
  #   runs-on: ubuntu-latest
  #   needs: [build_backend, build_frontend]

  #   steps:
    
  #     - name: Login to GCP
  #       uses: google-github-actions/setup-gcloud@v0
  #       with:
  #         project_id: ${{ secrets.GCP_PROJECT_ID }}
  #         service_account_email: ${{ secrets.GCP_EMAIL }}
  #         service_account_key: ${{ secrets.GCP_CREDENTIALS }}

  #     - name: delete prev job 
  #       run: |
  #         gcloud scheduler jobs delete user-progress-eval-job-dev \
  #         --location=europe-west1 \
  #         --project $GCP_PROJECT_NAME \
  #         --quiet

  #     - name: schedule job
  #       if: always()
  #       run: |
  #         gcloud scheduler jobs create http user-progress-eval-job-dev \
  #         --schedule="0 0 * * *" \
  #         --uri="https://api.dev.epistogram.com/scheduledjobs/evaluate-user-progress" \
  #         --http-method=GET --location=europe-west1 \
  #         --project $GCP_PROJECT_NAME

  # DEPLOY DATABASE
  deploy_database: 
    name: Deploy database
    runs-on: ubuntu-latest

    steps:

      - name: Checkout branch
        uses: actions/checkout@v2
        with:
          ref: dev
    
      - name: Migrate schema
        working-directory: epistogram_backend/deploy
        shell: pwsh
        run: |
          ./migVersionCore.ps1 -dbpass '${{secrets.DB_SERVICE_USER_PASSWORD}}' -dbhost '${{secrets.DB_HOST_ADDRESS}}' -dbport '${{secrets.DB_PORT}}' -dbname 'epistogram_DEV' -dbuser '${{secrets.DB_SERVICE_USER_NAME}}'