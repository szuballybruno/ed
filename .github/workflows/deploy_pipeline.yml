name: epistogram_deploy_pipeline
on:
  push:
    branches: [ dev, demo, main ]

env:
  BRANCH_NAME: ${{ github.ref_name }} 
  DB_NAME: epistogram_${{github.ref_name}}

  CLIENT_WEB_IMAGE_NAME: gcr.io/${{secrets.GCP_PROJECT_ID}}/epistogram-frontend-${{github.ref_name}}-img
  FRONTEND_CLOUD_RUN_SVC_NAME: epistogram-frontend-${{github.ref_name}}

  SERVER_API_IMAGE_NAME: gcr.io/${{secrets.GCP_PROJECT_ID}}/epistogram-backend-${{github.ref_name}}-img
  BACKEND_CLOUD_RUN_SVC_NAME: epistogram-backend-${{github.ref_name}}
  
  CLOUD_SQL_CONNCETION_NAME: gifted-country-324010:europe-central2:epistogram
  GCP_PROJECT_NAME: gifted-country-324010

  PGPASSWORD: ${{ secrets.DB_SERVICE_USER_PASSWORD }}
  CONFIG_ENV_PATH: ./epistogram/packages/server-api/config/${{ github.ref_name }}.config.env

jobs:

  #
  # ---- BUILD IMAGES
  #

  build_and_push_images: 
    name: Build and push images
    runs-on: ubuntu-latest
    
    steps:

      # ----- checkout repo
      - name: Checkout branch
        uses: actions/checkout@v3
        with:
          path: './epistogram'
      
      # ----- setup cacheing 
      - name: Cache docker-cache folder
        uses: actions/cache@v3
        with:
          path: /tmp/docker-cache
          key: ${{env.BRANCH_NAME}}-docker-cache

      # ------ auth
      - name: Login to GCP
        uses: google-github-actions/setup-gcloud@v0
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_email: ${{ secrets.GCP_EMAIL }}
          service_account_key: ${{ secrets.GCP_CREDENTIALS }}

      - name: Configure GCP Docker
        run: gcloud auth configure-docker --quiet

      # ------ set secret env variables
      - name: Set secrets to ${{ github.ref_name }}.config.env file
        run: |
          echo "" >> ${{ env.CONFIG_ENV_PATH }}
          echo JWT_SIGN_SECRET = ${{secrets.JWT_SIGN_SECRET}} >> ${{ env.CONFIG_ENV_PATH }}
          echo MAIL_TOKEN_SECRET = ${{secrets.MAIL_TOKEN_SECRET}} >> ${{ env.CONFIG_ENV_PATH }}
          echo MAIL_SERVICE_USER_NAME = ${{secrets.MAIL_SENDER_MAIL}} >> ${{ env.CONFIG_ENV_PATH }}
          echo MAIL_SERVICE_USER_PASSWORD = ${{secrets.MAIL_SENDER_PASSWORD}} >> ${{ env.CONFIG_ENV_PATH }}
          echo DB_HOST_ADDRESS = ${{secrets.DB_HOST_ADDRESS}} >> ${{ env.CONFIG_ENV_PATH }}
          echo DB_SERVICE_USER_NAME = ${{secrets.DB_SERVICE_USER_NAME}} >> ${{ env.CONFIG_ENV_PATH }}
          echo DB_SERVICE_USER_PASSWORD = ${{secrets.DB_SERVICE_USER_PASSWORD}} >> ${{ env.CONFIG_ENV_PATH }}

      # ------ setup build
      - name: Setup build
        shell: pwsh
        run: |
          ./epistogram/scripts/create-builder.ps1
          ./epistogram/scripts/run-registry.ps1

      # ------ build images
      - name: Build containers
        shell: pwsh
        run: |
          ./epistogram/scripts/monobuild.ps1 `
            -client_env "${{env.BRANCH_NAME}}" `
            -builddeps

      # ------ name public images 
      - name: Name public images 
        run: |
          docker image tag localhost:6000/server:latest $SERVER_API_IMAGE_NAME
          docker image tag localhost:6000/client:latest $CLIENT_WEB_IMAGE_NAME

      # ------ push images
      - name: Push server-api
        run: |
          docker push $SERVER_API_IMAGE_NAME

      - name: Push client-web
        run: |
          docker push $CLIENT_WEB_IMAGE_NAME

  # 
  # ----- DEPLOY DATABASE 
  #

  deploy_database: 
    name: Deploy database
    runs-on: ubuntu-latest
    needs: [build_and_push_images]

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          path: './epistogram'

      - name: Run migen
        shell: pwsh
        run: ./epistogram/packages/x-migen/scripts/run_migen_prod.ps1 `
          -dbname "${{env.DB_NAME}}" `
          -dbhost "${{secrets.DB_HOST_ADDRESS}}" `
          -dbpassword "${{secrets.DB_SERVICE_USER_PASSWORD}}" `
          -dbusername "${{secrets.DB_SERVICE_USER_NAME}}" `
          -dbport "${{secrets.DB_PORT}}" `
          -outFolderPath "${PWD}/epistogram/migen_out" `
          -schemaFolderPath "${PWD}/epistogram/packages/server-services/sql" `
          -migen_folder_path "${PWD}/epistogram/packages/x-migen" `
          -mode "EXECUTE"

  #
  # ----- DEPLOY IMAGES
  #

  deploy_frontend:
    name: Deploy frontend
    runs-on: ubuntu-latest
    needs: [deploy_database]
    
    steps:  
      - name: Login to GCP
        uses: google-github-actions/setup-gcloud@v0
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_email: ${{ secrets.GCP_EMAIL }}
          service_account_key: ${{ secrets.GCP_CREDENTIALS }}

      - name: Configure GCP Docker
        run: gcloud auth configure-docker --quiet

      - name: Deploy Docker image to GCP CloudRun
        run: |
          gcloud run deploy $FRONTEND_CLOUD_RUN_SVC_NAME \
          --image $CLIENT_WEB_IMAGE_NAME \
          --region europe-west1 \
          --platform managed \
          --max-instances 1 \
          --port 80 \
          --allow-unauthenticated 

  deploy_backend:
    name: Deploy backend
    runs-on: ubuntu-latest
    needs: [deploy_database]

    steps:
      - name: Login to GCP
        uses: google-github-actions/setup-gcloud@v0
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_email: ${{ secrets.GCP_EMAIL }}
          service_account_key: ${{ secrets.GCP_CREDENTIALS }}

      - name: Configure GCP Docker
        run: gcloud auth configure-docker --quiet
        
      - name: Deploy Docker image to GCP CloudRun
        run: |
          gcloud run deploy $BACKEND_CLOUD_RUN_SVC_NAME \
          --image $SERVER_API_IMAGE_NAME \
          --add-cloudsql-instances $CLOUD_SQL_CONNCETION_NAME \
          --region europe-west1 \
          --platform managed \
          --max-instances 1 \
          --min-instances 0 \
          --port 5000 \
          --allow-unauthenticated \
          --memory 4Gi \
          --cpu 2 \
          --concurrency 200 \
          --set-env-vars "ENV_NAME=${{ env.BRANCH_NAME }}"