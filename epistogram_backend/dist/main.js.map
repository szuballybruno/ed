{"version":3,"sources":["webpack://fitnessapp-backend/./api/articles/getArticles.ts","webpack://fitnessapp-backend/./api/articles/routes.ts","webpack://fitnessapp-backend/./api/courses/controllers/addToCourse.ts","webpack://fitnessapp-backend/./api/courses/controllers/createCourse.ts","webpack://fitnessapp-backend/./api/courses/controllers/deleteCourse.ts","webpack://fitnessapp-backend/./api/courses/controllers/editCourse.ts","webpack://fitnessapp-backend/./api/courses/controllers/getAllCourses.ts","webpack://fitnessapp-backend/./api/courses/controllers/getCourse.ts","webpack://fitnessapp-backend/./api/courses/controllers/removeFromCourse.ts","webpack://fitnessapp-backend/./api/courses/controllers/uploadCourseImage.ts","webpack://fitnessapp-backend/./api/courses/routes.ts","webpack://fitnessapp-backend/./api/files/controllers/uploadAvatarImage.ts","webpack://fitnessapp-backend/./api/files/controllers/uploadThumbnailImage.ts","webpack://fitnessapp-backend/./api/files/controllers/uploadVoteImages.ts","webpack://fitnessapp-backend/./api/files/routes.ts","webpack://fitnessapp-backend/./api/groups/controllers/GET/getGroups.ts","webpack://fitnessapp-backend/./api/groups/routes.ts","webpack://fitnessapp-backend/./api/organizations/controllers/GET/getOrganizations.ts","webpack://fitnessapp-backend/./api/organizations/routes.ts","webpack://fitnessapp-backend/./api/overlays/controllers/uploadOverlay.ts","webpack://fitnessapp-backend/./api/overlays/routes.ts","webpack://fitnessapp-backend/./api/tags/controllers/deleteTag.ts","webpack://fitnessapp-backend/./api/tags/controllers/getTags.ts","webpack://fitnessapp-backend/./api/tags/controllers/updateTag.ts","webpack://fitnessapp-backend/./api/tags/routes.ts","webpack://fitnessapp-backend/./api/tasks/controllers/PUT/setTask.ts","webpack://fitnessapp-backend/./api/tasks/routes.ts","webpack://fitnessapp-backend/./api/users/controllers/DELETE/deleteUser.ts","webpack://fitnessapp-backend/./api/users/controllers/GET/getUsers.ts","webpack://fitnessapp-backend/./api/users/controllers/GET/login.ts","webpack://fitnessapp-backend/./api/users/controllers/GET/newGetUser.ts","webpack://fitnessapp-backend/./api/users/controllers/GET/resetUser.ts","webpack://fitnessapp-backend/./api/users/controllers/PATCH/updateActivity.ts","webpack://fitnessapp-backend/./api/users/controllers/PATCH/updateCurrentCourse.ts","webpack://fitnessapp-backend/./api/users/controllers/PATCH/updateCurrentItem.ts","webpack://fitnessapp-backend/./api/users/controllers/PATCH/updateUser.ts","webpack://fitnessapp-backend/./api/users/controllers/PUT/signup.ts","webpack://fitnessapp-backend/./api/users/routes.ts","webpack://fitnessapp-backend/./api/videos/controllers/GET/getVideo.ts","webpack://fitnessapp-backend/./api/videos/controllers/GET/getVideos.ts","webpack://fitnessapp-backend/./api/videos/controllers/addOverlayAnswer.ts","webpack://fitnessapp-backend/./api/videos/controllers/addToVideo.ts","webpack://fitnessapp-backend/./api/videos/controllers/editVideo.ts","webpack://fitnessapp-backend/./api/videos/controllers/removeFromVideo.ts","webpack://fitnessapp-backend/./api/videos/controllers/uploadVideoImage.ts","webpack://fitnessapp-backend/./api/videos/routes.ts","webpack://fitnessapp-backend/./api/votes/controller.ts","webpack://fitnessapp-backend/./api/votes/controllers/GET/getVotes.ts","webpack://fitnessapp-backend/./api/votes/routes.ts","webpack://fitnessapp-backend/./configuration/config.ts","webpack://fitnessapp-backend/./emails/email.ts","webpack://fitnessapp-backend/./emails/transporter.ts","webpack://fitnessapp-backend/./server.ts","webpack://fitnessapp-backend/./services/checkRequest.ts","webpack://fitnessapp-backend/./services/checkUser.ts","webpack://fitnessapp-backend/./services/connectMongo.ts","webpack://fitnessapp-backend/./services/fileServices.ts","webpack://fitnessapp-backend/./services/flattenObject.ts","webpack://fitnessapp-backend/./services/generateToken.ts","webpack://fitnessapp-backend/./services/responseReducer.ts","webpack://fitnessapp-backend/external \"bcryptjs\"","webpack://fitnessapp-backend/external \"body-parser\"","webpack://fitnessapp-backend/external \"cors\"","webpack://fitnessapp-backend/external \"email-templates\"","webpack://fitnessapp-backend/external \"express\"","webpack://fitnessapp-backend/external \"express-fileupload\"","webpack://fitnessapp-backend/external \"fs\"","webpack://fitnessapp-backend/external \"jsonwebtoken\"","webpack://fitnessapp-backend/external \"mongodb\"","webpack://fitnessapp-backend/external \"node-ssh\"","webpack://fitnessapp-backend/external \"nodemailer\"","webpack://fitnessapp-backend/webpack/bootstrap","webpack://fitnessapp-backend/webpack/startup"],"names":["getArticles","req","res","allArticles","Connection","db","collection","find","toArray","responseReducer","then","r","status","responseStatus","json","responseText","catch","e","send","errorText","router","Router","get","addToCourse","next","updateOne","ObjectID","params","courseId","$push","flattenObject","body","Error","toString","createCourse","uploadedFile","console","log","JSON","parse","stringify","files","file","insertOne","doc","createFile","insertedId","deleteCourse","deleteOne","_id","editCourse","$set","getAllCourses","checkRequest","courses","aggregate","query","isRecommended","featured","$addFields","$filter","input","as","cond","$in","$ifNull","$and","$or","RegExp","searchData","category","$expr","$cond","if","$ne","organizationId","$eq","else","$toObjectId","name","teacherName","colorOne","colorTwo","thumbnailUrl","items","groups","filteredGroups","fetchCourses","getCourse","course","$match","overlaysCount","courseGroup","teacherId","permissionLevel","tags","removeFromCourse","$pull","uploadCourseImage","put","patch","delete","post","uploadAvatarImage","uploadThumbnailImage","uploadVoteImages","getGroups","getOrganizations","organizations","uploadOverlay","deleteTag","tagId","getTags","updateTag","tagByName","findOne","tag","findOneAndUpdate","setTask","taskToUserId","Date","now","taskName","userId","dueDate","state","deleteUser","getUsers","userData","role","allUsers","$unwind","path","preserveNullAndEmptyArrays","$project","$concat","usersInOrganization","usersInGroups","err","login","email","password","existingUser","token","isValidPassword","compare","sign","expiresIn","supervisorId","end","errorCode","newGetUser","user","$mergeObjects","resetUser","mailToken","generateToken","emailConfig","emailContent","lastName","firstName","config","frontendUrl","updateActivity","authHeader","headers","authorization","split","verify","tokenMailSecret","undefined","activities","createdAt","updateCurrentCourse","upsert","new","updateCurrentItem","currentItem","itemId","updateableObject","updateUser","currentPassword","newPassword","hashedPassword","hash","phoneNumber","signup","checkUser","insertedUser","createdUser","active","username","innerRole","getVideo","video","videoId","getVideos","videos","$lookup","from","localField","foreignField","addOverlayAnswer","addToVideo","editVideo","removeFromVideo","uploadVideoImage","isItVideo","videoThumbnailUrl","getFileExtension","getVote","vote","ObjectId","voteQuestion","voteFirstAnswerName","voteFirstAnswerPath","voteSecondAnswerName","voteSecondAnswerPath","voteAnswersCount","voteFirstAnswerCount","voteSecondAnswerCount","getVotes","allVotes","uploadVote","updateVote","votes","uploadFolderPath","backendUrl","backendUrlMinimal","database","serverUrl","dbName","dbUsername","dbPassword","tokenSecret","mailHost","senderEmail","senderPassword","scpConfig","host","port","passphrase","message","transport","transporter","views","options","extension","map","preview","url","template","to","subject","locals","nev","createTransport","secure","auth","pass","tls","rejectUnauthorized","connectToMongo","server","use","setHeader","error","process","env","PORT","listen","requestData","reqBodyType","route","methods","data","MongoClient","connect","client","bufferMaxEntries","useNewUrlParser","useUnifiedTopology","NodeSSH","ssh","fileName","substr","lastIndexOf","localpath","existsSync","mkdir","recursive","mv","toLowerCase","putFile","rm","searchImages","readdirSync","ob","flatObject","toReturn","i","hasOwnProperty","x","isNaN","module","exports","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","call"],"mappings":"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","file":"main.js","sourcesContent":["import express from \"express\";\r\nimport {Connection} from \"../../services/connectMongo\";\r\nimport {responseReducer} from \"../../services/responseReducer\"\r\n\r\n\r\nexport const getArticles = (req: express.Request, res: express.Response) => {\r\n    const fetchData = async () => {\r\n        const allArticles = await Connection.db.collection(\"articles\").find( {} ).toArray();\r\n        return responseReducer(200, allArticles)\r\n    }\r\n    fetchData().then((r) => {\r\n        res.status(r.responseStatus).json(r.responseText)\r\n    }).catch((e) => {\r\n        res.status(400).send(e.errorText)\r\n    })\r\n};","import {Router} from \"express\";\r\nexport const router = Router()\r\n\r\nimport {getArticles} from \"./getArticles\";\r\n\r\nrouter.get('/getarticles', getArticles)\r\n\r\n","import {Connection} from \"../../../services/connectMongo\";\r\nimport {responseReducer} from \"../../../services/responseReducer\";\r\nimport { Request, Response, NextFunction } from \"express\";\r\nimport { ObjectID } from \"mongodb\";\r\nimport {flattenObject} from \"../../../services/flattenObject\";\r\n\r\n\r\nexport const addToCourse = (req: Request, res: Response, next: NextFunction) => {\r\n    const updateData = async () => {\r\n        //FindOneAndUpdate\r\n        try {\r\n            await Connection.db.collection(\"courses\").updateOne({\"_id\": new ObjectID(req.params.courseId)}, {\r\n                $push: flattenObject(req.body)\r\n            })\r\n        } catch (e) {\r\n            throw new Error(\"Shit heppönsz\" + e.toString())\r\n        }\r\n        return responseReducer(201, \"Az adatok frissítése sikeres!\")\r\n    }\r\n    updateData().then((r) => {\r\n        res.status(r.responseStatus).send(r.responseText)\r\n    }).catch(next)\r\n}\r\n","import { Connection } from '../../../services/connectMongo'\r\nimport {responseReducer} from '../../../services/responseReducer'\r\nimport {Request, Response, NextFunction} from \"express\";\r\nimport {UploadedFile} from \"express-fileupload\";\r\nimport {createFile} from \"../../../services/fileServices\";\r\n\r\n\r\nexport const createCourse = (req: Request, res: Response, next: NextFunction) => {\r\n    let uploadedFile: UploadedFile\r\n    console.log(JSON.parse(JSON.stringify(req.body)))\r\n    const insertData = async () => {\r\n        if (req.files) {\r\n            uploadedFile = req.files.file as UploadedFile\r\n\r\n        }\r\n        return Connection.db.collection(\"courses\").insertOne(req.body).then((doc) => {\r\n            createFile(uploadedFile, `/var/lib/assets/epistogram@development/courses/`, doc.insertedId)\r\n            return responseReducer(200, \"Adatok hozzáadva az adatbázishoz \")\r\n        }).catch((e) => {\r\n            return responseReducer(400, \"Az adatok hozzáadása sikertelen\" + e)\r\n        })\r\n    }\r\n    insertData().then((r) => {\r\n        res.status(r.responseStatus).send(r.responseText)\r\n    }).catch((e) => {\r\n        res.status(400).send(e.responseText)\r\n    });\r\n};\r\n","import {responseReducer} from '../../../services/responseReducer'\r\nimport { Connection } from '../../../services/connectMongo'\r\nimport { ObjectID } from 'mongodb'\r\nimport { Request, Response, NextFunction } from \"express\";\r\n\r\nexport const deleteCourse = (req: Request, res: Response, next: NextFunction) => {\r\n    const fetchData = async () => {\r\n        try {\r\n            await Connection.db.collection(\"courses\").deleteOne({_id: new ObjectID(req.params.courseId as string)})\r\n        } catch (e) {\r\n            throw new Error(\"A kurzus törlése sikertelen\")\r\n        }\r\n        return responseReducer(200, \"A kurzus sikeresen törölve\")\r\n    }\r\n\r\n    fetchData().then((r: {responseStatus: number, responseText: string | object}) => {\r\n        res.status(r.responseStatus).json(r.responseText)\r\n    }).catch(next)\r\n\r\n};\r\n","import {Connection} from \"../../../services/connectMongo\";\r\nimport {responseReducer} from \"../../../services/responseReducer\";\r\nimport { Request, Response, NextFunction } from \"express\";\r\nimport { ObjectID } from \"mongodb\";\r\nimport {flattenObject} from \"../../../services/flattenObject\";\r\n\r\n\r\nexport const editCourse = (req: Request, res: Response, next: NextFunction) => {\r\n    const updateData = async () => {\r\n        //FindOneAndUpdate\r\n        try {\r\n            await Connection.db.collection(\"courses\").updateOne({\"_id\": new ObjectID(req.params.courseId)}, {\r\n                $set: flattenObject(req.body)\r\n            })\r\n        } catch (e) {\r\n            throw new Error(\"Shit heppönsz\" + e.toString())\r\n        }\r\n        return responseReducer(201, \"Az adatok frissítése sikeres!\")\r\n    }\r\n    updateData().then((r) => {\r\n        res.status(r.responseStatus).send(r.responseText)\r\n    }).catch(next)\r\n}\r\n","import {NextFunction, Request, Response} from \"express\";\r\n\r\nconst {responseReducer} = require('../../../services/responseReducer')\r\nconst { Connection } = require('../../../services/connectMongo')\r\nimport {checkRequest} from '../../../services/checkRequest'\r\n\r\nexport const getAllCourses = (req: Request, res: Response, next: NextFunction) => {\r\n    checkRequest(req, res, next, [\"userId\"])\r\n\r\n    const fetchCourses = async function() {\r\n        const courses = await Connection.db.collection(\"courses\").aggregate([\r\n            {\r\n                '$lookup': {\r\n                    'from': 'users',\r\n                    'let': {\r\n                        'userId': {\r\n                            '$toObjectId': '6022c270f66f803c80243250'\r\n                        }\r\n                    },\r\n                    'pipeline': [\r\n                        {\r\n                            '$match': {\r\n                                '$expr': {\r\n                                    '$eq': [\r\n                                        '$_id', '$$userId'\r\n                                    ]\r\n                                }\r\n                            }\r\n                        }\r\n                    ],\r\n                    'as': 'user'\r\n                }\r\n            }, {\r\n                '$unwind': {\r\n                    'path': '$user',\r\n                    'preserveNullAndEmptyArrays': true\r\n                }\r\n            }, {\r\n                '$lookup': {\r\n                    'from': 'organizations',\r\n                    'localField': 'organizationId',\r\n                    'foreignField': '_id',\r\n                    'as': 'org'\r\n                }\r\n            }, {\r\n                '$unwind': {\r\n                    'path': '$org',\r\n                    'preserveNullAndEmptyArrays': true\r\n                }\r\n            },/* {\r\n                '$lookup': {\r\n                    'from': 'groups',\r\n                    'localField': 'groups',\r\n                    'foreignField': '_id',\r\n                    'as': 'groups'\r\n                }\r\n            },*/ {\r\n                '$lookup': {\r\n                    'from': 'users',\r\n                    'let': {\r\n                        'teacherId': {\r\n                            '$convert': {\r\n                                'input': '$teacherId',\r\n                                'to': 7,\r\n                                'onError': '',\r\n                                'onNull': ''\r\n                            }\r\n                        }\r\n                    },\r\n                    'pipeline': [\r\n                        {\r\n                            '$match': {\r\n                                '$expr': {\r\n                                    '$eq': [\r\n                                        '$_id', '$$teacherId'\r\n                                    ]\r\n                                }\r\n                            }\r\n                        }\r\n                    ],\r\n                    'as': 'teacher'\r\n                }\r\n            }, {\r\n                '$unwind': {\r\n                    'path': '$teacher',\r\n                    'preserveNullAndEmptyArrays': true\r\n                }\r\n            }, {\r\n                '$addFields': {\r\n                    'courseTagsAsArrayOfObject': {\r\n                        '$map': {\r\n                            'input': '$tags',\r\n                            'as': 'line',\r\n                            'in': {\r\n                                '$mergeObjects': [\r\n                                    {\r\n                                        '_id': '$$line'\r\n                                    }\r\n                                ]\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }, {\r\n                '$addFields': {\r\n                    'courseAndUserTags': {\r\n                        '$filter': {\r\n                            'input': '$user.userStatistics.tags',\r\n                            'as': 'line',\r\n                            'cond': {\r\n                                '$in': [\r\n                                    '$$line._id', '$courseTagsAsArrayOfObject._id'\r\n                                ]\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }, {\r\n                '$lookup': {\r\n                    'from': 'tags',\r\n                    'as': 'doneTags',\r\n                    'let': {\r\n                        'courseAndUserTagsLocal': '$courseAndUserTags'\r\n                    },\r\n                    'pipeline': [\r\n                        {\r\n                            '$match': {\r\n                                '$expr': {\r\n                                    '$in': [\r\n                                        '$_id', '$$courseAndUserTagsLocal._id'\r\n                                    ]\r\n                                }\r\n                            }\r\n                        }, {\r\n                            '$project': {\r\n                                'name': 1,\r\n                                'count': {\r\n                                    '$filter': {\r\n                                        'input': '$$courseAndUserTagsLocal',\r\n                                        'as': 'tag',\r\n                                        'cond': {\r\n                                            '$eq': [\r\n                                                '$$tag._id', '$_id'\r\n                                            ]\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }, {\r\n                            '$unwind': '$count'\r\n                        }, {\r\n                            '$project': {\r\n                                '_id': 1,\r\n                                'count': '$count.count',\r\n                                'name': 1\r\n                            }\r\n                        }\r\n                    ]\r\n                }\r\n            }, {\r\n                '$addFields': {\r\n                    'sumCount': {\r\n                        '$sum': {\r\n                            '$map': {\r\n                                'input': '$doneTags',\r\n                                'as': 'line',\r\n                                'in': '$$line.count'\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }, {\r\n                '$match': {\r\n                    '$expr': {\r\n                        '$cond': [\r\n                            {\r\n                                '$eq': [\r\n                                    req.query.isRecommended, \"true\"\r\n                                ]\r\n                            }, {\r\n                                '$ne': [\r\n                                    '$doneTags', []\r\n                                ]\r\n                            }, {\r\n                                'a': 'a'\r\n                            }\r\n                        ]\r\n                    }\r\n                }\r\n            }, {\r\n                '$match': {\r\n                    '$expr': {\r\n                        '$cond': [\r\n                            {\r\n                                '$eq': [\r\n                                    req.query.featured, \"true\"\r\n                                ]\r\n                            }, {\r\n                                '$eq': [\r\n                                    '$featured', true\r\n                                ]\r\n                            }, {\r\n                                'a': 'a'\r\n                            }\r\n                        ]\r\n                    }\r\n                }\r\n            },{\r\n                $addFields: {\r\n                    \"filteredGroups\": {\r\n                        $filter: {\r\n                            input: \"$user.userData.groups\",\r\n                            as: \"userGroup\",\r\n                            cond: {\r\n                                $in: [\"$$userGroup.groupId\", {$ifNull: [\"$groups\", []]}]\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }, {\r\n                '$match': {\r\n                    $and: [\r\n                        {\r\n                            $or: [\r\n                                {\"name\": (new RegExp(req.query.searchData as string, 'i'))},\r\n                                {\"category\": (new RegExp(req.query.searchData as string, 'i'))}\r\n                            ]\r\n                        },\r\n                        {\r\n                            \"category\": (new RegExp(req.query.category as string, 'i'))\r\n                        },\r\n                        {\r\n                            $expr: {\r\n                                $cond: {\r\n                                    if: {\r\n                                        $ne: [req.query.organizationId, null]\r\n                                    },\r\n                                    then: {\r\n                                        $eq: [req.query.organizationId, \"$organizationId\"]\r\n                                    },\r\n                                    else: {},\r\n                                }\r\n                            }\r\n                        },\r\n                        {\r\n                            $expr: {\r\n                                $cond: {\r\n                                    if: {\r\n                                       $ne: [\"$user.userData.role\", \"admin\"]\r\n                                    },\r\n                                    then: {\r\n                                        $eq: [\"$user.userData.organizationId\", \"$organizationId\"]\r\n                                    },\r\n                                    else: {},\r\n                                }\r\n                            }\r\n                        }/*,\r\n                        {\r\n                            $expr: {\r\n                                $cond: {\r\n                                    if: {\r\n                                       $and: [\r\n                                           {\r\n                                               $ne: [\"$user.userData.role\", \"admin\"]\r\n                                           },\r\n                                           {\r\n                                               $ne: [\"$user.userData.role\", \"owner\"]\r\n                                           }\r\n                                       ]\r\n                                    },\r\n                                    then: {\r\n                                        $ne: [\"$filteredGroups\", []]\r\n                                    },\r\n                                    else: {},\r\n                                }\r\n                            }\r\n                        }*/\r\n                    ]\r\n                }\r\n            }, {\r\n                '$addFields': {\r\n                    'videos': {\r\n                        '$filter': {\r\n                            'input': '$items',\r\n                            'cond': {\r\n                                '$eq': [\r\n                                    '$$this.type', 'video'\r\n                                ]\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }, {\r\n                '$addFields': {\r\n                    'exams': {\r\n                        '$filter': {\r\n                            'input': '$items',\r\n                            'cond': {\r\n                                '$eq': [\r\n                                    '$$this.type', 'exam'\r\n                                ]\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }, {\r\n                '$lookup': {\r\n                    'from': 'videos',\r\n                    'let': {\"localVideos\": \"$videos\"},\r\n                    'pipeline': [{\r\n                        '$match': {\r\n                            '$expr': {\r\n                                '$filter': {\r\n                                    'input': '$$localVideos',\r\n                                    'as': 'video',\r\n                                    'cond': {\r\n                                        '$eq': [\r\n                                            '$_id', {$toObjectId: '$$video.itemId'}\r\n                                        ]\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                    }],\r\n                    'as': 'videosWithData'\r\n                }\r\n            }, {\r\n                '$lookup': {\r\n                    'from': 'exams',\r\n                    'let': {\"localExams\": \"$exams\"},\r\n                    'pipeline': [{\r\n                        '$match': {\r\n                            '$expr': {\r\n                                '$filter': {\r\n                                    'input': '$$localExams',\r\n                                    'as': 'exam',\r\n                                    'cond': {\r\n                                        '$eq': [\r\n                                            '$_id', {$toObjectId: '$$exam.itemId'}\r\n                                        ]\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                    }],\r\n                    'as': 'examsWithData'\r\n                }\r\n            }, {\r\n                '$addFields': {\r\n                    'videosWithAllData': {\r\n                        '$map': {\r\n                            'input': '$videos',\r\n                            'as': 'video',\r\n                            'in': {\r\n                                '$mergeObjects': [\r\n                                    '$$video', {\r\n                                        '$arrayElemAt': [\r\n                                            {\r\n                                                '$filter': {\r\n                                                    'input': '$videosWithData',\r\n                                                    'as': 'extVideo',\r\n                                                    'cond': {\r\n                                                        '$eq': [\r\n                                                            {$toObjectId: '$$video.itemId'}, '$$extVideo._id'\r\n                                                        ]\r\n                                                    }\r\n                                                }\r\n                                            }, 0\r\n                                        ]\r\n                                    }\r\n                                ]\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }, {\r\n                '$addFields': {\r\n                    'examsWithAllData': {\r\n                        '$map': {\r\n                            'input': '$exams',\r\n                            'as': 'exam',\r\n                            'in': {\r\n                                '$mergeObjects': [\r\n                                    '$$exam', {\r\n                                        '$arrayElemAt': [\r\n                                            {\r\n                                                '$filter': {\r\n                                                    'input': '$examsWithData',\r\n                                                    'as': 'extExam',\r\n                                                    'cond': {\r\n                                                        '$eq': [\r\n                                                            {$toObjectId: '$$exam.itemId'}, '$$extExam._id'\r\n                                                        ]\r\n                                                    }\r\n                                                }\r\n                                            }, 0\r\n                                        ]\r\n                                    }\r\n                                ]\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }, {\r\n                '$addFields': {\r\n                    'allItems': {\r\n                        '$concatArrays': [\r\n                            '$videosWithAllData', '$examsWithAllData'\r\n                        ]\r\n                    }\r\n                }\r\n            }, {\r\n                '$project': {\r\n                    name: 1,\r\n                    category: 1,\r\n                    teacherName: \"$teacher.name\",\r\n                    colorOne: 1,\r\n                    colorTwo: 1,\r\n                    thumbnailUrl: 1,\r\n                    items: \"$allItems\",//\"$teacher.userData.lastName\" + \"$teacher.userData.firstName\"\r\n                    groups: \"$groups\",\r\n                    filteredGroups: \"$filteredGroups\"\r\n                }\r\n            }\r\n        ]).toArray()\r\n        return responseReducer(200, courses)\r\n    }\r\n\r\n    fetchCourses().then((r) => {\r\n        res.status(r.responseStatus).json(r.responseText)\r\n    }).catch(next)\r\n}\r\n\r\n","import {NextFunction, Request, Response} from \"express\";\r\nimport {Connection} from \"../../../services/connectMongo\";\r\nimport {responseReducer} from \"../../../services/responseReducer\";\r\nimport {ObjectID} from \"mongodb\";\r\n\r\nexport const getCourse = (req: Request, res: Response, next: NextFunction) => {\r\n    const fetchCourse = async () => {\r\n        const course = await Connection.db.collection(\"courses\").aggregate([\r\n            {\r\n                $match: {\r\n                    \"_id\": new ObjectID(req.params.courseId + \"\")\r\n                }\r\n            }, {\r\n                '$addFields': {\r\n                    'videos': {\r\n                        '$filter': {\r\n                            'input': '$items',\r\n                            'cond': {\r\n                                '$eq': [\r\n                                    '$$this.type', 'video'\r\n                                ]\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }, {\r\n                '$addFields': {\r\n                    'exams': {\r\n                        '$filter': {\r\n                            'input': '$items',\r\n                            'cond': {\r\n                                '$eq': [\r\n                                    '$$this.type', 'exam'\r\n                                ]\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }, {\r\n                '$lookup': {\r\n                    'from': 'videos',\r\n                    'let': {'localVideos': '$videos'},\r\n                    'pipeline': [{\r\n                        '$match': {\r\n                            '$expr': {\r\n                                '$filter': {\r\n                                    'input': '$$localVideos',\r\n                                    'as': 'localVideo',\r\n                                    'cond': {\r\n                                        '$eq': [\r\n                                            '$_id', '$$localVideo._id'\r\n                                        ]\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }, {\r\n                        '$addFields': {\r\n                            overlaysCount: {\r\n                                \"$cond\": {\r\n                                    \"if\": {\r\n                                        \"$isArray\": \"$overlays\"\r\n                                    },\r\n                                    \"then\": {\r\n                                        \"$size\": \"$overlays\"\r\n                                    },\r\n                                    \"else\": 1\r\n                                }\r\n                            }\r\n                        }\r\n                    }],\r\n                    'as': 'videosWithData'\r\n                }\r\n            }, {\r\n                '$lookup': {\r\n                    'from': 'exams',\r\n                    'localField': 'exams.itemId',\r\n                    'foreignField': '_id',\r\n                    'as': 'examsWithData'\r\n                }\r\n            }, {\r\n                '$addFields': {\r\n                    'videosWithAllData': {\r\n                        '$map': {\r\n                            'input': '$videos',\r\n                            'as': 'video',\r\n                            'in': {\r\n                                '$mergeObjects': [\r\n                                    '$$video', {\r\n                                        '$arrayElemAt': [\r\n                                            {\r\n                                                '$filter': {\r\n                                                    'input': '$videosWithData',\r\n                                                    'as': 'extVideo',\r\n                                                    'cond': {\r\n                                                        '$eq': [\r\n                                                            '$$video.itemId', '$$extVideo._id'\r\n                                                        ]\r\n                                                    }\r\n                                                }\r\n                                            }, 0\r\n                                        ]\r\n                                    }\r\n                                ]\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }, {\r\n                '$addFields': {\r\n                    'examsWithAllData': {\r\n                        '$map': {\r\n                            'input': '$exams',\r\n                            'as': 'exam',\r\n                            'in': {\r\n                                '$mergeObjects': [\r\n                                    '$$exam', {\r\n                                        '$arrayElemAt': [\r\n                                            {\r\n                                                '$filter': {\r\n                                                    'input': '$examsWithData',\r\n                                                    'as': 'extExam',\r\n                                                    'cond': {\r\n                                                        '$eq': [\r\n                                                            '$$exam.itemId', '$$extExam._id'\r\n                                                        ]\r\n                                                    }\r\n                                                }\r\n                                            }, 0\r\n                                        ]\r\n                                    }\r\n                                ]\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }, {\r\n                '$addFields': {\r\n                    'allItems': {\r\n                        '$concatArrays': [\r\n                            '$videosWithAllData', '$examsWithAllData'\r\n                        ]\r\n                    }\r\n                }\r\n            }, {\r\n                '$addFields': {\r\n                    'courseTagsAsArrayOfObject': {\r\n                        '$map': {\r\n                            'input': '$tags',\r\n                            'as': 'line',\r\n                            'in': {\r\n                                '$mergeObjects': [\r\n                                    {\r\n                                        '_id': '$$line'\r\n                                    }\r\n                                ]\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }, {\r\n                '$lookup': {\r\n                    'from': 'tags',\r\n                    'pipeline': [],\r\n                    'as': 'tagsFromCollection'\r\n                }\r\n            }, {\r\n                '$addFields': {\r\n                    'doneTags': {\r\n                        '$map': {\r\n                            'input': '$courseTagsAsArrayOfObject',\r\n                            'as': 'line',\r\n                            'in': {\r\n                                '$filter': {\r\n                                    'input': '$tagsFromCollection',\r\n                                    'as': 'linee',\r\n                                    'cond': {\r\n                                        '$eq': ['$$linee._id', {$toObjectId: '$$line._id'}]\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }, {\r\n                '$addFields': {\r\n                    'doneTagsAsObjects': {\r\n                        '$map': {\r\n                            'input': '$doneTags',\r\n                            'as': 'line',\r\n                            'in': {\r\n                                '$mergeObjects': '$$line'\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }, {\r\n                '$addFields': {\r\n                    'groupsAsArrayOfObject': {\r\n                        '$map': {\r\n                            'input': '$groups',\r\n                            'as': 'line',\r\n                            'in': {\r\n                                '$mergeObjects': [\r\n                                    {\r\n                                        '_id': '$$line'\r\n                                    }\r\n                                ]\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }, {\r\n                '$lookup': {\r\n                    'from': 'groups',\r\n                    'pipeline': [],\r\n                    'as': 'groupsFromCollection'\r\n                }\r\n            }, {\r\n                '$addFields': {\r\n                    'doneGroups': {\r\n                        '$map': {\r\n                            'input': '$groupsAsArrayOfObject',\r\n                            'as': 'line',\r\n                            'in': {\r\n                                '$filter': {\r\n                                    'input': '$groupsFromCollection',\r\n                                    'as': 'linee',\r\n                                    'cond': {\r\n                                        '$eq': ['$$linee._id', {$toObjectId: '$$line._id'}]\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }, {\r\n                '$addFields': {\r\n                    'doneGroupsAsObjects': {\r\n                        '$map': {\r\n                            'input': '$doneGroups',\r\n                            'as': 'line',\r\n                            'in': {\r\n                                '$mergeObjects': '$$line'\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            },{\r\n                '$project': {\r\n                    _id: 1,\r\n                    name: 1,\r\n                    category: 1,\r\n                    courseGroup: 1,\r\n                    teacherId: 1,\r\n                    organizationId: 1,\r\n                    permissionLevel: 1,\r\n                    featured: 1,\r\n                    tags: '$doneTagsAsObjects',\r\n                    items: \"$allItems\",\r\n                    groups: \"$doneGroupsAsObjects\",\r\n                    colorOne: 1,\r\n                    colorTwo: 1\r\n                }\r\n            }\r\n        ]).toArray()\r\n        return responseReducer(200, course[0])\r\n    }\r\n    fetchCourse().then((r) => {\r\n        res.status(r.responseStatus).send(r.responseText)\r\n    }).catch(next)\r\n};","import {Connection} from \"../../../services/connectMongo\";\r\nimport {responseReducer} from \"../../../services/responseReducer\";\r\nimport { Request, Response, NextFunction } from \"express\";\r\nimport { ObjectID } from \"mongodb\";\r\nimport {flattenObject} from \"../../../services/flattenObject\";\r\n\r\n\r\nexport const removeFromCourse = (req: Request, res: Response, next: NextFunction) => {\r\n    const updateData = async () => {\r\n        //FindOneAndUpdate\r\n        try {\r\n            await Connection.db.collection(\"courses\").updateOne({\"_id\": new ObjectID(req.params.courseId)}, {\r\n                $pull: flattenObject(req.body)\r\n            })\r\n        } catch (e) {\r\n            throw new Error(\"Shit heppönsz\" + JSON.stringify(req.body))\r\n        }\r\n        return responseReducer(201, \"Az adatok frissítése sikeres!\")\r\n    }\r\n    updateData().then((r) => {\r\n        res.status(r.responseStatus).send(r.responseText)\r\n    }).catch(next)\r\n}\r\n","import {Connection} from \"../../../services/connectMongo\";\r\nimport {createFile} from \"../../../services/fileServices\";\r\nimport {responseReducer} from \"../../../services/responseReducer\";\r\nimport {Request, Response, NextFunction} from 'express'\r\nimport { UploadedFile } from \"express-fileupload\";\r\n\r\nexport const uploadCourseImage = (req: Request, res: Response, next: NextFunction) => {\r\n    let uploadedFile: UploadedFile\r\n    const updateData = async () => {\r\n        if (req.files) {\r\n            uploadedFile = req.files.file as UploadedFile\r\n        }\r\n        createFile(uploadedFile, `/var/lib/assets/epistogram@development/courses/`, req.params.courseId)\r\n        return responseReducer(201, \"Adatok hozzáadva az adatbázishoz \")\r\n    }\r\n    updateData().then((r) => {\r\n        res.status(r.responseStatus).send(r.responseText)\r\n    }).catch((e) => {\r\n        res.status(400).send(e.responseText)\r\n    });\r\n};","import {Router} from \"express\";\r\nexport const router = Router()\r\n\r\nimport {getAllCourses} from './controllers/getAllCourses'\r\nimport {getCourse} from './controllers/getCourse'\r\nimport {createCourse} from './controllers/createCourse'\r\nimport {deleteCourse} from \"./controllers/deleteCourse\";\r\nimport {addToCourse} from \"./controllers/addToCourse\";\r\nimport {removeFromCourse} from \"./controllers/removeFromCourse\";\r\nimport {editCourse} from \"./controllers/editCourse\";\r\nimport {uploadCourseImage} from \"./controllers/uploadCourseImage\";\r\n\r\n\r\n//get\r\nrouter.get('/', getAllCourses);\r\n\r\nrouter.get('/course/:courseId', getCourse);\r\nrouter.put('/course/:courseId', addToCourse);\r\nrouter.patch('/course/:courseId', editCourse);\r\nrouter.patch('/course/:courseId/remove', removeFromCourse);\r\nrouter.put('/course/:courseId/image', uploadCourseImage)\r\nrouter.delete('/course/:courseId', deleteCourse)\r\n\r\n\r\nrouter.post('/createCourse', createCourse)\r\n","import {checkFile} from \"../../../services/checkFile\";\r\nimport {NextFunction, Request, Response} from \"express\";\r\nimport {Connection} from \"../../../services/connectMongo\";\r\nimport {config} from \"../../../configuration/config\"\r\nimport {createFile} from \"../../../services/fileServices\"\r\n\r\nexport const uploadAvatarImage = (req: Request, res: Response, next: NextFunction) => {\r\n    /*checkFile(req,res,next);\r\n    const files  = (req as RequestWithFile).files;\r\n    const uploadAvatar = async () => {\r\n        const currentUser = await Connection.db.collection(\"user\").findOne({'email': req.body.email})\r\n        const file = files.file\r\n        createFile(file, `${config.uploadFolderPath}/${currentUser.coachId}/${currentUser._id}/`, file.name)\r\n    }\r\n\r\n    uploadAvatar().then(() => {\r\n        res.status(201).send(\"Fájl sikeresen feltöltve!\")\r\n    }).catch((error) => {\r\n        res.status(400).send(\"A fájl feltöltése sikertelen \" + error)\r\n    })*/\r\n}","import {checkFile} from \"../../../services/checkFile\";\r\nimport {NextFunction, Request, Response} from \"express\";\r\nimport {createFile, searchImages} from \"../../../services/fileServices\";\r\nimport {config} from \"../../../configuration/config\";\r\nimport {Connection} from \"../../../services/connectMongo\";\r\nimport {FileArray, UploadedFile} from \"express-fileupload\";\r\n\r\nexport const uploadThumbnailImage = (req: Request, res: Response, next: NextFunction) => {\r\n    /*checkFile(req,res,next);\r\n    let uploadedFile: UploadedFile\r\n    if (req.files) {\r\n        uploadedFile = req.files.file as UploadedFile\r\n    }\r\n    const uploadThumbnail = async () => {\r\n        const path = `${config.uploadFolderPath}/${req.body.coachId}/videothumbnails`\r\n        const extension = uploadedFile.name.substr(uploadedFile.name.lastIndexOf('.') + 1)\r\n        createFile(uploadedFile.data, path, req.body.videoId + '.' + extension)\r\n        const imagePaths = await searchImages(path)\r\n        await Connection.db.collection(\"video\").findOne({'_id': req.body.videoId}, (err, doc) => {\r\n            if (err || doc === null) {\r\n                console.log(\"A videó nem található\")\r\n            } else {\r\n                doc.videoThumbnailUrl = path + imagePaths[0]\r\n                doc.save()\r\n            }\r\n        })\r\n    }\r\n\r\n    uploadThumbnail().then(() => {\r\n        res.status(201).send(\"Fájl sikeresen feltöltve!\")\r\n    }).catch((error) => {\r\n        res.status(400).send(\"A fájl feltöltése sikertelen \" + error)\r\n    })*/\r\n}","import {NextFunction, Request, Response} from \"express\";\r\n\r\nexport const uploadVoteImages = (req: Request, res: Response, next: NextFunction) => {\r\n    //verifyFile(req,res,next)\r\n    /*const uploadVote = async (req, res, next) => {\r\n        const path = `${config.backendUrl}/votes/${req.body.voteName}`;\r\n\r\n        req.files.file.map((file,index) => {\r\n            const name = file.name\r\n            const fileExtension = (name.substr(name.lastIndexOf('.') + 1));\r\n            if (index === 0) {\r\n                createFile(file, path, \"voteFirstAnswerCount\" + \".\" + fileExtension)\r\n            } else if (index === 1) {\r\n                createFile(file, path, \"voteSecondAnswerCount\" + \".\" + fileExtension)\r\n            } else {\r\n                console.log(\"Több képet próbáltál feltölteni 2-nél\")\r\n            }\r\n        })\r\n        const imagePaths = await searchImages(path)\r\n        await GeneralData.findOne({'availableVotes.active': true}, (err, doc) => {\r\n            doc.voteFirstAnswerPath = path + imagePaths[0]\r\n            doc.voteSecondAnswerPath = path + imagePaths[1]\r\n            doc.save()\r\n        })\r\n    }\r\n    uploadVote(req,res,next).then(() => {\r\n        res.status(201).send(\"Fájlok sikeresen feltöltve!\")\r\n    }).catch((error) => {\r\n        res.status(400).send(\"A fájl feltöltése sikertelen \" + error)\r\n    })*/\r\n}","import {Router} from \"express\";\nexport const router = Router()\n\nimport {uploadAvatarImage} from \"./controllers/uploadAvatarImage\";\nimport {uploadThumbnailImage} from \"./controllers/uploadThumbnailImage\"\nimport {uploadVoteImages} from \"./controllers/uploadVoteImages\"\n\nrouter.post('/uploadavatar', uploadAvatarImage)\nrouter.post('/uploadthumbnail', uploadThumbnailImage)\nrouter.post('/uploadvotes', uploadVoteImages)\n","import {Request, Response, NextFunction} from \"express\";\r\n\r\nconst {responseReducer} = require('../../../../services/responseReducer')\r\nconst { Connection } = require('../../../../services/connectMongo')\r\n//const { ObjectID } = require('mongodb').ObjectID\r\n\r\nexport const getGroups = (req: Request, res: Response, next: NextFunction) => {\r\n    const fetchCourses = async () => {\r\n        const groups = await Connection.db.collection(\"groups\").aggregate([]).toArray()\r\n        return responseReducer(200, groups)\r\n    }\r\n    fetchCourses().then((r) => {\r\n        res.status(r.responseStatus).send(r.responseText)\r\n    }).catch(next)\r\n};","import {Router} from \"express\";\r\nexport const router = Router()\r\n\r\nimport {getGroups} from './controllers/GET/getGroups'\r\n\r\nrouter.get('/', getGroups);\r\n\r\n","import {responseReducer} from '../../../../services/responseReducer'\r\nimport { Connection } from '../../../../services/connectMongo'\r\nimport {Request, Response, NextFunction} from \"express\";\r\n//import {checkRequest} from \"../../../../services/checkRequest\";\r\n//import {ObjectID} from \"mongodb\";\r\n\r\nexport const getOrganizations = (req: Request, res: Response, next: NextFunction) => {\r\n    const fetchUsers = async () => {\r\n        //const user = await Connection.db.collection(\"users\").findOne({_id: new ObjectID(req.query.userId as string)})\r\n        const organizations = await Connection.db.collection(\"organizations\").aggregate([]).toArray()\r\n        return responseReducer(200, organizations)\r\n\r\n    }\r\n\r\n    fetchUsers().then(r => {\r\n        res.status(r.responseStatus).send(r.responseText)\r\n    }).catch(next)\r\n};","import {Router} from \"express\";\r\nexport const router = Router()\r\n\r\nimport {getOrganizations} from \"./controllers/GET/getOrganizations\";\r\n\r\nrouter.get('/getorganizations', getOrganizations);","import { Connection } from '../../../services/connectMongo'\r\nimport {responseReducer} from '../../../services/responseReducer'\r\nimport {Request, Response, NextFunction} from \"express\";\r\n\r\n\r\nexport const uploadOverlay = (req: Request, res: Response, next: NextFunction) => {\r\n    const insertData = async () => {\r\n        return Connection.db.collection(\"videos\").insertOne(req.body).then((r: any) => {\r\n            return responseReducer(200, \"Adatok hozzáadva az adatbázishoz \" + r)\r\n        }).catch((e: any) => {\r\n            return responseReducer(400, \"Az adatok hozzáadása sikertelen\" + e)\r\n        })\r\n    }\r\n    insertData().then((r) => {\r\n        res.status(r.responseStatus).send(r.responseText)\r\n    }).catch(next);\r\n};","import {Router} from \"express\";\r\nimport {uploadOverlay} from \"./controllers/uploadOverlay\";\r\nexport const router = Router()\r\n\r\nrouter.post('/', uploadOverlay);\r\n\r\n//router.get('/overlay/:overlayId', uploadOverlay)\r\n/*router.get('/', getVideos);\r\n\r\nrouter.put('/video/:itemId', addToVideo)\r\nrouter.put('/video/:itemId/overlay/answer', addOverlayAnswer)\r\nrouter.patch('/video/:itemId', editVideo)\r\nrouter.patch('/video/:itemId/remove', removeFromVideo)\r\n\r\nrouter.put('/video/:itemId/image', uploadVideoImage);*/","import { ObjectID } from \"mongodb\";\r\nimport {Connection} from \"../../../services/connectMongo\";\r\nimport {responseReducer} from \"../../../services/responseReducer\";\r\nimport {Request, Response, NextFunction} from 'express'\r\n\r\nexport const deleteTag = (req: Request, res: Response, next: NextFunction) => {\r\n    const fetchData = async () => {\r\n        try {\r\n            await Connection.db.collection(\"tags\").deleteOne({_id: new ObjectID(req.params.tagId as string)})\r\n        } catch (e) {\r\n            throw new Error(\"A tag törlése sikertelen\")\r\n        }\r\n        return responseReducer(200, \"Tag sikeresen törölve\")\r\n    }\r\n\r\n    fetchData().then((r: {responseStatus: number, responseText: string | object}) => {\r\n        res.status(r.responseStatus).json(r.responseText)\r\n    }).catch(next)\r\n\r\n};\r\n","import {responseReducer} from '../../../services/responseReducer'\r\nimport { Connection } from '../../../services/connectMongo'\r\nimport { Request, Response, NextFunction } from \"express\";\r\n\r\nexport const getTags = (req: Request, res: Response, next: NextFunction) => {\r\n    const fetchData = async () => {\r\n        const tags = await Connection.db.collection(\"tags\").aggregate([{\r\n            $match: {\r\n                \"name\": (new RegExp(req.query.searchData as string, 'i'))\r\n            }\r\n        }]).toArray()\r\n\r\n        return responseReducer(200, tags)\r\n    }\r\n\r\n    fetchData().then((r: {responseStatus: number, responseText: string | object}) => {\r\n        res.status(r.responseStatus).json(r.responseText)\r\n    }).catch(next)\r\n\r\n};\r\n","import { Connection } from '../../../services/connectMongo'\r\nimport {responseReducer} from '../../../services/responseReducer'\r\nimport {Request, Response, NextFunction} from \"express\";\r\nimport { ObjectID } from 'mongodb';\r\n\r\n\r\nexport const updateTag = (req: Request, res: Response, next: NextFunction) => {\r\n    const insertData = async () => {\r\n        if (req.body.name && req.body.name != \"\" && req.body._id && req.body._id != \"\") {\r\n            console.log(\"VanNameVanId\")\r\n            const tagByName = await Connection.db.collection(\"tags\").findOne({\"name\": req.body.name as string}).catch(e => {throw new Error(\"TagByName nem sikerült\")})\r\n            const tag = await Connection.db.collection(\"tags\").findOne({_id: new ObjectID(req.body._id)}).catch(e => {throw new Error(\"Tag nem található\")})\r\n            console.log(\"VanNameVanId2\" + tag + JSON.stringify(tagByName))\r\n\r\n            if (tag && tagByName) {\r\n                console.log(\"Jó_idJótagName\")\r\n                throw new Error(\"A tag már létezik\")\r\n            } else if (tag && !tagByName) {\r\n                console.log(\"Jó_idNincsTagNameAzAdatbazisban\")\r\n                await Connection.db.collection(\"tags\").findOneAndUpdate({\"_id\": new ObjectID(req.body._id)}, {\r\n                    $set: {\r\n                        name: req.body.name\r\n                    }\r\n                })\r\n                return responseReducer(200, \"Tag frissítve\")\r\n            } else if (!tag && !tagByName) {\r\n                console.log(\"RosszIdNincsTagNameAzAdatbazisban\")\r\n                return Connection.db.collection(\"tags\").insertOne({\r\n                    name: req.body.name\r\n                }).then((r) => {\r\n                    if (req.body.courseId && req.body.courseId != \"\") {\r\n                        Connection.db.collection(\"courses\").findOneAndUpdate({_id: new ObjectID(req.body.courseId)}, {\r\n                            $push: {\r\n                                tags: req.body._id || r.insertedId.toString()\r\n                            }\r\n                        })\r\n                    }\r\n                    return responseReducer(201, {_id: r.insertedId.toString()})\r\n                }).catch((e) => {\r\n                    throw new Error(\"A tag hozzáadása az adatbázishoz sikertelen\")\r\n                })\r\n            } else {\r\n                console.log(\"Van ilyen tag\")\r\n                throw new Error(\"Már van ilyen tag\")\r\n            }\r\n        } else if (req.body.name && req.body.name != \"\") {\r\n            console.log(\"NincsIdNincsTagNameAzAdatbazisban\")\r\n            const tagByName = await Connection.db.collection(\"tags\").findOne({\"name\": (new RegExp(req.body.name as string, 'i'))}).catch(e => {throw new Error(\"TagByName nem sikerült\")})\r\n            if (!tagByName) {\r\n                return Connection.db.collection(\"tags\").insertOne({\r\n                    name: req.body.name\r\n                }).then((r) => {\r\n                    if (req.body.courseId && req.body.courseId != \"\") {\r\n                        Connection.db.collection(\"courses\").findOneAndUpdate({_id: new ObjectID(req.body.courseId)}, {\r\n                            $push: {\r\n                                tags: req.body._id || r.insertedId.toString()\r\n                            }\r\n                        })\r\n                    }\r\n                    return responseReducer(201, {_id: r.insertedId.toString()})\r\n                }).catch((e) => {\r\n                    throw new Error(\"A tag hozzáadása az adatbázishoz sikertelen\")\r\n                })\r\n            } else {\r\n                throw new Error(\"Már van ilyen tag\")\r\n            }\r\n\r\n        } else {\r\n            console.log(\"NincsIdNincsTagName\")\r\n            throw new Error(\"Hibás kérés\")\r\n        }\r\n    }\r\n    insertData().then((r) => {\r\n        res.status(r.responseStatus).send(r.responseText)\r\n    }).catch((e) => {\r\n        res.status(400).send(JSON.stringify(e))\r\n    });\r\n};\r\n","import {Router} from \"express\";\r\nimport {getTags} from \"./controllers/getTags\";\r\nimport {updateTag} from \"./controllers/updateTag\";\r\nimport {deleteTag} from \"./controllers/deleteTag\";\r\nexport const router = Router()\r\n\r\nrouter.get('/', getTags)\r\nrouter.patch(\"/\", updateTag)\r\n/*\r\nrouter.get(\"/:tagId\", getTag)\r\nrouter.patch(\"/:tagId\", editTag);*/\r\nrouter.delete(\"/:tagId\", deleteTag)\r\n\r\n","import {NextFunction, Request, Response} from \"express\";\r\nimport {responseReducer} from \"../../../../services/responseReducer\";\r\nimport {checkRequest} from \"../../../../services/checkRequest\";\r\nimport {Connection} from \"../../../../services/connectMongo\";\r\nimport {ObjectID} from \"mongodb\";\r\n\r\nexport const setTask = (req: Request, res: Response, next: NextFunction) => {\r\n    const taskData = [\"userId\", \"taskToUserId\", \"taskName\", \"dueDate\", \"state\"]\r\n    checkRequest(req, res, next, taskData)\r\n    const setTaskInDatabase = async () => {\r\n        await Connection.db.collection(\"users\").updateOne(\r\n            { \"_id\": new ObjectID(req.body.taskToUserId)},\r\n            { \"$push\":\r\n                    {\"userData.tasks\":\r\n                            {\r\n                                \"addedDate\": Date.now(),\r\n                                \"name\": req.body.taskName,\r\n                                \"from\": new ObjectID(req.body.userId),\r\n                                \"due\": Date.parse(req.body.dueDate),\r\n                                \"state\": req.body.state\r\n                            }\r\n                    }\r\n            }\r\n        )\r\n        return responseReducer(200, \"\")\r\n    }\r\n\r\n    setTaskInDatabase().then((r) => {\r\n        return res.status(r.responseStatus).send(r.responseText)\r\n    })\r\n}","import {Router} from \"express\"\r\nimport {setTask} from \"./controllers/PUT/setTask\";\r\nexport const router = Router()\r\n\r\nrouter.put('/settask', setTask)","import {responseReducer} from '../../../../services/responseReducer'\r\nimport { Connection } from '../../../../services/connectMongo'\r\nimport { ObjectID } from 'mongodb'\r\nimport { Request, Response, NextFunction } from \"express\";\r\n\r\nexport const deleteUser = (req: Request, res: Response, next: NextFunction) => {\r\n    const fetchData = async () => {\r\n        try {\r\n            await Connection.db.collection(\"users\").deleteOne({_id: new ObjectID(req.params.userId as string)})\r\n        } catch (e) {\r\n            throw new Error(\"A felhasználó törlése sikertelen\")\r\n        }\r\n        return responseReducer(200, \"Felhasználó sikeresen törölve\")\r\n    }\r\n\r\n    fetchData().then((r: {responseStatus: number, responseText: string | object}) => {\r\n        res.status(r.responseStatus).json(r.responseText)\r\n    }).catch(next)\r\n\r\n};\r\n","import {responseReducer} from '../../../../services/responseReducer'\nimport { Connection } from '../../../../services/connectMongo'\nimport {Request, Response, NextFunction, response} from \"express\";\nimport {checkRequest} from \"../../../../services/checkRequest\";\nimport {ObjectID} from \"mongodb\";\n\nexport const getUsers = (req: Request, res: Response, next: NextFunction) => {\n\n    checkRequest(req, res, next, [\"userId\", \"organizationId\"])\n    const fetchUsers = async () => {\n        const user = await Connection.db.collection(\"users\").findOne({_id: new ObjectID(req.query.userId as string)})\n\n        switch (user.userData.role) {\n            case \"admin\":\n                const allUsers = await Connection.db.collection(\"users\").aggregate([\n                    {\n                        '$lookup': {\n                            'from': 'organizations',\n                            'let': {\n                                'organizationId': {\n                                    '$toObjectId': '$userData.organizationId'\n                                }\n                            },\n                            'pipeline': [\n                                {\n                                    '$match': {\n                                        '$expr': {\n                                            '$eq': [\n                                                '$_id', '$$organizationId'\n                                            ]\n                                        }\n                                    }\n                                }\n                            ],\n                            'as': 'orgs'\n                        }\n                    }, {\n                        $unwind: {\n                            path: \"$orgs\",\n                            preserveNullAndEmptyArrays: true\n                        }\n                    }, {\n                    $project: {\n                        \"_id\": 1,\n                        \"active\": \"$userData.active\",\n                        \"email\": \"$userData.email\",\n                        \"firstName\": \"$userData.firstName\",\n                        \"lastName\": \"$userData.lastName\",\n                        \"phoneNumber\": \"$userData.phoneNumber\",\n                        \"role\": \"$userData.role\",\n                        \"innerRole\": \"$userData.innerRole\",\n                        \"organizationName\": \"$orgs.organizationName\",\n                        \"name\" : { $concat : [ \"$userData.lastName\", \" \", \"$userData.firstName\" ] },\n                        \"tasks\": \"$userData.tasks\"\n                    }\n                }, {\n                    $match: { \"name\": (new RegExp(req.query.searchData as string, 'i'))}\n                }]).toArray()\n                return responseReducer(200, allUsers)\n            case \"owner\":\n                const usersInOrganization = await Connection.db.collection(\"users\").aggregate([\n                    {\n                        '$lookup': {\n                            'from': 'organizations',\n                            'let': {\n                                'organizationId': {\n                                    '$toObjectId': '$userData.organizationId'\n                                }\n                            },\n                            'pipeline': [\n                                {\n                                    '$match': {\n                                        '$expr': {\n                                            '$eq': [\n                                                '$_id', '$$organizationId'\n                                            ]\n                                        }\n                                    }\n                                }\n                            ],\n                            'as': 'orgs'\n                        }\n                    }, {\n                        '$unwind': {\n                            'path': '$orgs',\n                            'preserveNullAndEmptyArrays': false\n                        }\n                    }, {\n                        '$project': {\n                            '_id': 1,\n                            'active': '$userData.active',\n                            'email': '$userData.email',\n                            'firstName': '$userData.firstName',\n                            'lastName': '$userData.lastName',\n                            'phoneNumber': '$userData.phoneNumber',\n                            'role': '$userData.role',\n                            'innerRole': '$userData.innerRole',\n                            'organizationName': '$orgs.organizationName',\n                            'name': {\n                                '$concat': [\n                                    '$userData.lastName', ' ', '$userData.firstName'\n                                ]\n                            },\n                            'groups': '$filteredGroups.groupName'\n                        }\n                    }\n                ]).toArray()\n                return responseReducer(200, usersInOrganization)\n            case \"supervisor\":\n                const usersInGroups = await Connection.db.collection(\"users\").aggregate([\n                    {\n                        '$lookup': {\n                            'from': 'organizations',\n                            'let': {\n                                'organizationId': {\n                                    '$toObjectId': '$userData.organizationId'\n                                }\n                            },\n                            'pipeline': [\n                                {\n                                    '$match': {\n                                        '$expr': {\n                                            '$eq': [\n                                                '$_id', '$$organizationId'\n                                            ]\n                                        }\n                                    }\n                                }\n                            ],\n                            'as': 'orgs'\n                        }\n                    }, {\n                        '$unwind': {\n                            'path': '$orgs',\n                            'preserveNullAndEmptyArrays': false\n                        }\n                    }, {\n                        '$lookup': {\n                            'from': 'groups',\n                            'let': {\n                                'groups': {\n                                    '$ifNull': [\n                                        '$userData.groups', []\n                                    ]\n                                },\n                                'userId': {\n                                    '$toObjectId': '6022c270f66f803c80243250'\n                                }\n                            },\n                            'pipeline': [\n                                {\n                                    '$match': {\n                                        '$expr': {\n                                            '$eq': [\n                                                '$$userId', '$groupSupervisorId'\n                                            ]\n                                        }\n                                    }\n                                }\n                            ],\n                            'as': 'searchableGroups'\n                        }\n                    }, {\n                        '$lookup': {\n                            'from': 'groups',\n                            'localField': 'userData.groups.groupId',\n                            'foreignField': '_id',\n                            'as': 'filteredGroups'\n                        }\n                    }, {\n                        '$match': {\n                            'filteredGroups.0': {\n                                '$exists': true\n                            }\n                        }\n                    }, {\n                        '$project': {\n                            '_id': 1,\n                            'active': '$userData.active',\n                            'email': '$userData.email',\n                            'firstName': '$userData.firstName',\n                            'lastName': '$userData.lastName',\n                            'phoneNumber': '$userData.phoneNumber',\n                            'role': '$userData.role',\n                            'innerRole': '$userData.innerRole',\n                            'organizationName': '$orgs.organizationName',\n                            'name': {\n                                '$concat': [\n                                    '$userData.lastName', ' ', '$userData.firstName'\n                                ]\n                            },\n                            'groups': '$filteredGroups.groupName'\n                        }\n                    }\n                ]).toArray()\n                return responseReducer(200, usersInGroups)\n            default:\n                throw new Error(\"A felhasználó egyik rolenak sem felel meg\")\n        }\n    }\n\n    fetchUsers().then(r => {\n        res.status(r.responseStatus).send(r.responseText)\n    }).catch(err => {\n        res.status(400).send(err.toString())\n    })\n};\n","import bcrypt from \"bcryptjs\"\nimport jwt from \"jsonwebtoken\"\nimport {responseReducer} from '../../../../services/responseReducer'\nimport { Connection } from '../../../../services/connectMongo'\nimport { Request, Response } from \"express\";\n\nexport const login = (req: Request, res: Response) => {\n    const email = req.query.email;\n    const password = req.query.password;\n\n    const authenticate = async () => {\n        let existingUser\n        try {\n            existingUser = await Connection.db.collection(\"users\").findOne({\"userData.email\": email});\n        } catch (e) {\n            return responseReducer(401, \"Invalid credentials, could not log you in. \" + e)\n        }\n\n\n        if (!existingUser) {\n            return responseReducer(401, \"Invalid credentials, could not log you in.\");\n        }\n\n        let isValidPassword = false;\n        try {\n            isValidPassword = await bcrypt.compare(password as string, existingUser.userData.password);\n        } catch (err) {\n            return responseReducer(400, \"No credentials, could not log you inc. \" + err);\n        }\n\n        if (!isValidPassword) {\n            return responseReducer(401, \"No credentials, could not log you ind. \" + req.query.password + \" asd\" + isValidPassword);\n        }\n\n        let token;\n        try {\n            token = jwt.sign(\n                {userId: existingUser._id, email: existingUser.userData.email},\n                'AROWILLSAVETHECODE',\n                {expiresIn: '24h'}\n            );\n        } catch (err) {\n            return responseReducer(500, \"Logging in failed, please try again later.\" + err);\n        }\n\n        return responseReducer(200, {\n\n            userId: existingUser._id,\n            supervisorId: existingUser.userData.supervisorId,\n            email: existingUser.userData.email,\n            role: existingUser.userData.role,\n            token: token,\n            organizationId: existingUser.userData.organizationId\n        });\n    }\n\n    authenticate().then((r) => {\n        return res.status(r.responseStatus).end(JSON.stringify(r.responseText))\n    }).catch((e) => {\n        return res.status(e.errorCode).end(e.errorText)\n    })\n};\n","import {responseReducer} from '../../../../services/responseReducer'\r\nimport { Connection } from '../../../../services/connectMongo'\r\nimport {Request, Response, NextFunction, response} from \"express\";\r\nimport {checkRequest} from \"../../../../services/checkRequest\";\r\nimport {ObjectID} from \"mongodb\";\r\n\r\nexport const newGetUser = (req: Request, res: Response, next: NextFunction) => {\r\n    const fetchUser = async () => {\r\n        const user = await Connection.db.collection(\"users\").aggregate([\r\n            {\r\n                '$match': {\"_id\": new ObjectID(req.params.userId)}\r\n            },{\r\n                $set: {\"userData.currentItemId\": {$toObjectId: \"$userData.currentItemId\"} }\r\n            },{\r\n                '$lookup': {\r\n                    'from': 'courses',\r\n                    'let': {\r\n                        'currentCourseId': {$toObjectId: '$userData.currentCourseId'}\r\n                    },\r\n                    'pipeline': [\r\n                        {\r\n                            '$match': {\r\n                                '$expr': {\r\n                                    '$eq': [\r\n                                        '$_id', '$$currentCourseId'\r\n                                    ]\r\n                                }\r\n                            }\r\n                        }\r\n                    ],\r\n                    'as': 'currentCourse'\r\n                }\r\n            }, {\r\n                '$unwind': {\r\n                    'path': '$currentCourse',\r\n                    'preserveNullAndEmptyArrays': true\r\n                }\r\n            }, {\r\n                '$addFields': {\r\n                    'items': '$currentCourse.items'\r\n                }\r\n            }, {\r\n                '$addFields': {\r\n                    'videos': {\r\n                        '$filter': {\r\n                            'input': '$items',\r\n                            'cond': {\r\n                                '$eq': [\r\n                                    '$$this.type', 'video'\r\n                                ]\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }, {\r\n                '$addFields': {\r\n                    'exams': {\r\n                        '$filter': {\r\n                            'input': '$items',\r\n                            'cond': {\r\n                                '$eq': [\r\n                                    '$$this.type', 'exam'\r\n                                ]\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }, {\r\n                '$lookup': {\r\n                    'from': 'videos',\r\n                    'let': {\"localVideos\": \"$videos\"},\r\n                    'pipeline': [{\r\n                        '$match': {\r\n                            '$expr': {\r\n                                '$filter': {\r\n                                    'input': '$$localVideos',\r\n                                    'as': 'video',\r\n                                    'cond': {\r\n                                        '$eq': [\r\n                                            '$_id', {$toObjectId: '$$video.itemId'}\r\n                                        ]\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                    }],\r\n                    'as': 'videosWithData'\r\n                }\r\n            }, {\r\n                '$lookup': {\r\n                    'from': 'exams',\r\n                    'let': {\"localExams\": \"$exams\"},\r\n                    'pipeline': [{\r\n                        '$match': {\r\n                            '$expr': {\r\n                                '$filter': {\r\n                                    'input': '$$localExams',\r\n                                    'as': 'exam',\r\n                                    'cond': {\r\n                                        '$eq': [\r\n                                            '$_id', {$toObjectId: '$$exam.itemId'}\r\n                                        ]\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                    }],\r\n                    'as': 'examsWithData'\r\n                }\r\n            }, {\r\n                '$addFields': {\r\n                    'videosWithAllData': {\r\n                        '$map': {\r\n                            'input': '$videos',\r\n                            'as': 'video',\r\n                            'in': {\r\n                                '$mergeObjects': [\r\n                                    '$$video', {\r\n                                        '$arrayElemAt': [\r\n                                            {\r\n                                                '$filter': {\r\n                                                    'input': '$videosWithData',\r\n                                                    'as': 'extVideo',\r\n                                                    'cond': {\r\n                                                        '$eq': [\r\n                                                            {$toObjectId: '$$video.itemId'}, '$$extVideo._id'\r\n                                                        ]\r\n                                                    }\r\n                                                }\r\n                                            }, 0\r\n                                        ]\r\n                                    }\r\n                                ]\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }, {\r\n                '$addFields': {\r\n                    'examsWithAllData': {\r\n                        '$map': {\r\n                            'input': '$exams',\r\n                            'as': 'exam',\r\n                            'in': {\r\n                                '$mergeObjects': [\r\n                                    '$$exam', {\r\n                                        '$arrayElemAt': [\r\n                                            {\r\n                                                '$filter': {\r\n                                                    'input': '$examsWithData',\r\n                                                    'as': 'extExam',\r\n                                                    'cond': {\r\n                                                        '$eq': [\r\n                                                            {$toObjectId: '$$exam.itemId'}, '$$extExam._id'\r\n                                                        ]\r\n                                                    }\r\n                                                }\r\n                                            }, 0\r\n                                        ]\r\n                                    }\r\n                                ]\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }, {\r\n                '$addFields': {\r\n                    'allItems': {\r\n                        '$concatArrays': [\r\n                            '$videosWithAllData', '$examsWithAllData'\r\n                        ]\r\n                    }\r\n                }\r\n            }, {\r\n                '$lookup': {\r\n                    'from': 'videos',\r\n                    'localField': 'userData.currentItemId',\r\n                    'foreignField': '_id',\r\n                    'as': 'currentItemVideoNeo'\r\n                }\r\n            }, {\r\n                '$unwind': {\r\n                    'path': '$currentItemVideoNeo',\r\n                    'preserveNullAndEmptyArrays': true\r\n                }\r\n            },{\r\n                '$lookup': {\r\n                    'from': 'overlays',\r\n                    'let': {\r\n                        'inOverlays': '$currentItemVideoNeo.overlays'\r\n                    },\r\n                    'pipeline': [\r\n                        {\r\n                            '$match': {\r\n                                '$expr': {\r\n                                    '$filter': {\r\n                                        \"input\": \"$$inOverlays\",\r\n                                        \"as\": \"overlay\",\r\n                                        \"cond\": {\r\n                                            '$eq': [\r\n                                                '$_id', '$$overlay._id'\r\n                                            ]\r\n                                        }\r\n                                    },\r\n\r\n                                }\r\n                            }\r\n                        }\r\n                    ],\r\n                    'as': 'allOverlays'\r\n                }\r\n            }, {\r\n                '$lookup': {\r\n                    'from': 'videos',\r\n                    'let': {\"videoId\": \"$userData.currentItemId\", \"asd\": \"$allOverlays\"},\r\n                    'pipeline': [{\r\n                        '$match': {\r\n                            '$expr': {\r\n                                '$eq': [\r\n                                    '$_id', {$toObjectId: '$$videoId'}\r\n                                ]\r\n                            }\r\n                        }\r\n                    }, {\r\n                        \"$addFields\": {\r\n                            \"overlays\": \"$$asd\"\r\n                        }\r\n                    }],\r\n                    'as': 'currentItemVideo'\r\n                }\r\n            },{\r\n                \"$unwind\": {\r\n                    'path': '$currentItemVideo'\r\n                }\r\n            },{\r\n                '$lookup': {\r\n                    'from': 'exams',\r\n                    'localField': 'userData.currentItemId',\r\n                    'foreignField': '_id',\r\n                    'as': 'currentItemExam'\r\n                }\r\n            },{\r\n                '$unwind': {\r\n                    'path': '$currentItemExam',\r\n                    'preserveNullAndEmptyArrays': true\r\n                }\r\n            },{\r\n                $addFields: {\r\n                    \"currentItem\": {\r\n                        $mergeObjects: [\"$currentItemVideo\", \"$currentItemExam\"]\r\n                    }\r\n                }\r\n            }, {\r\n                '$lookup': {\r\n                    'from': 'courses',\r\n                    'localField': 'userStatistics.courses._id',\r\n                    'foreignField': '_id',\r\n                    'as': 'doneCourses'\r\n                }\r\n            }, {\r\n                '$lookup': {\r\n                    'from': 'exams',\r\n                    'localField': 'userStatistics.exams._id',\r\n                    'foreignField': '_id',\r\n                    'as': 'doneExams'\r\n                }\r\n            }, {\r\n                '$lookup': {\r\n                    'from': 'votes',\r\n                    'pipeline': [\r\n                        {\r\n                            '$match': {\r\n                                '$expr': {\r\n                                    '$eq': [\r\n                                        '$active', true\r\n                                    ]\r\n                                }\r\n                            }\r\n                        }\r\n                    ],\r\n                    'as': 'vote'\r\n                }\r\n            }, {\r\n                '$unwind': {\r\n                    'path': '$vote',\r\n                    'preserveNullAndEmptyArrays': true\r\n                }\r\n            },{\r\n                '$lookup': {\r\n                    'from': 'courses',\r\n                    'localField': 'userStatistics.tags._id',\r\n                    'foreignField': 'tags',\r\n                    'as': 'recommendedCourses'\r\n                }\r\n            },{\r\n                '$project': {\r\n                    'asd': \"$allOverlays\",\r\n                    'userData': {\r\n                        'allowedMachinesAtHome': '$userData.security.allowedMachines',\r\n                        'avatarUrl': '$userData.avatarUrl',\r\n                        'badges': '$userData.badges',\r\n                        'currentCourse': {\r\n                            $mergeObjects: [\"$currentCourse\", { items: \"$allItems\"}],\r\n                        },\r\n                        'currentSeeSomethingNew': '{}',\r\n                        'currentItem': '$currentItem',\r\n                        'doneCourses': '$doneCourses',\r\n                        'doneExams': '$doneExams',\r\n                        'email': 1,\r\n                        'epistoCoins': 1,\r\n                        'firstName': 1,\r\n                        'favoriteCourses': [],\r\n                        'innerRole': 1,\r\n                        'lastName': 1,\r\n                        'linkedInUrl': 1,\r\n                        'notes': 1,\r\n                        'phoneNumber': 1,\r\n                        'recommendedCourses': '$recommendedCourses',\r\n                        'role': 1,\r\n                        'tasks': 1,\r\n                        'username': 1,\r\n                        'userDescription': 1,\r\n                        'watchedVideosCount': '0'\r\n                    },\r\n                    'userStatistics': 1,\r\n                    'vote': \"$vote\"\r\n                }\r\n            }\r\n        ]).toArray()\r\n        return responseReducer( 200, user[0])\r\n    }\r\n\r\n    fetchUser().then(r => {\r\n        res.status(r.responseStatus).send(r.responseText)\r\n    }).catch(err => {\r\n        res.status(400).send(err.toString())\r\n    })\r\n};\r\n","import {responseReducer} from '../../../../services/responseReducer'\r\nimport { Connection } from '../../../../services/connectMongo'\r\nimport {Request, Response, NextFunction, response} from \"express\";\r\nimport {checkRequest} from \"../../../../services/checkRequest\";\r\nimport {ObjectID} from \"mongodb\";\r\nimport Email from \"email-templates\";\r\nimport {emailConfig, emailContent} from \"../../../../emails/email\";\r\nimport {config} from \"../../../../configuration/config\";\r\nimport {generateToken} from \"../../../../services/generateToken\";\r\n\r\nexport const resetUser = (req: Request, res: Response, next: NextFunction) => {\r\n    const fetchUsers = async () => {\r\n        const user = await Connection.db.collection(\"users\").findOne({_id: new ObjectID(req.params.userId as string)})\r\n        const mailToken = await generateToken(req,res,next,user._id, user.userData.email)\r\n        await new Email(emailConfig).send(emailContent(user.userData.email, `${user.userData.lastName} ${user.userData.firstName}`, `${config.frontendUrl}/regisztracio`, mailToken)).catch((err: string) => {\r\n            throw new Error('Jelszó visszaállító e-mail kiküldése sikertelen' + err);\r\n        });\r\n        return responseReducer(200, \"Jelszó visszaállító e-mail kiküldve\")\r\n    }\r\n\r\n    fetchUsers().then(r => {\r\n        res.status(r.responseStatus).send(r.responseText)\r\n    }).catch(next)\r\n};\r\n","import {Connection} from '../../../../services/connectMongo'\r\nimport {Request, NextFunction, Response} from \"express\";\r\nimport {responseReducer} from \"../../../../services/responseReducer\";\r\nimport {ObjectID} from \"mongodb\";\r\nimport {checkRequest} from \"../../../../services/checkRequest\";\r\nimport jwt from \"jsonwebtoken\";\r\nimport {config} from \"../../../../configuration/config\";\r\nimport {UploadedFile} from \"express-fileupload\";\r\n\r\ntype activity = {\r\n    // MINDEGYIKHEZ KELL\r\n    //createdAt: Date, // A jelenlegi dátum automatikusan hozzáfűzve\r\n    actionType: string //\"playVideo\" | \"pauseVideo\" | \"openNewVideo\" | \"openNewCourse\" // A konkrét cselekvés típusa például videó megtekintése, szavazás megtekintése\r\n    actionTriggererURL: string // A cselekvés származási URL-je\r\n    actionTriggererItemName: string // A cselekvést kiváltó elem egyedi elnevezése camelCasing-el\r\n    actionTriggererItemLabel: string // A cselekvést kiváltó elem felhasználó által látható elnevezése\r\n    activityType: \"modification\" | \"generalPassive\" | \"collBasedPassive\" | \"collBasedActive\", // Összesen négy értéke lehet, az aktivitás típusát határozza meg.\r\n    description: string // A cselekvés leírása saját szavakkal\r\n    sentByUser: boolean // A felhasználó vagy a szoftver küldte a kérést\r\n\r\n    // BIZONYOS ESETEKBEN BÁRMELYIKHEZ KELLHET\r\n\r\n    actionSubject?: string, // Az action tárgya, amihez kötődik\r\n    actionValue?: string, //\r\n    collectionName?: string, // Bármelyik létező collection neve lehet.\r\n    groupByPropertyName?: string, // Az adott collectionben létező érték neve, például _id, name, category stb.\r\n    groupByPropertyValue?: string, // A groupByPropertyName-hez tartozó aktuális érték, például _id esetén: 6022c270f66f803c80243250\r\n    actionTriggererItemKey?: string // A cselekvést kiváltó elem egyedi azonosítója generált elemek esetén\r\n    nextStateURL?: string // A következő oldal URL-je, ha van.\r\n    nextStateType?: string // oldalmódosítás, ui módosítás,\r\n    nextStateValue?: string\r\n\r\n    // CSAK MÓDOSÍTÁS ESETÉN KELL\r\n\r\n    modifiedPropertyName?: string,\r\n    modifiedPropertyCurrentValue?: string,\r\n    modifiedPropertyNextValue?: string,\r\n}\r\n\r\nexport const updateActivity = (req: Request, res: Response, next: NextFunction) => {\r\n    checkRequest(req,res,next, [\"actionType\", \"actionTriggererURL\", \"actionTriggererItemName\", \"actionTriggererItemLabel\", \"activityType\", \"description\"])\r\n\r\n    const authHeader = req.headers.authorization\r\n    let userData: {\r\n        email: string\r\n        userId: string\r\n    } | undefined\r\n    if (authHeader) {\r\n        const token = authHeader.split(' ')[1];\r\n\r\n        jwt.verify(token, config.tokenMailSecret, (err, user) => {\r\n            if (err) {\r\n                throw new Error(\"A token ellenőrzése sikertelen\")\r\n            }\r\n            userData = user as {email: string, userId: string}\r\n        })\r\n    }\r\n\r\n    const updateActivity = async () => {\r\n        console.log(req.body)\r\n        try {\r\n            await Connection.db.collection(\"users\").updateOne({\"_id\": new ObjectID(userData != undefined ? userData.userId : \"\")}, {\r\n                $push: {\r\n                    activities: {\r\n                        createdAt: Date.now(),\r\n                        ...req.body as activity\r\n                    }\r\n                }\r\n            })\r\n        } catch (e) {\r\n            throw new Error(\"Shit heppönsz\" + e.toString())\r\n        }\r\n\r\n        return responseReducer(200, \"Adatfrissítés sikeres\")\r\n    }\r\n\r\n    updateActivity().then((r) => {\r\n        res.status(r.responseStatus).send(r.responseText)\r\n    }).catch((e) => {\r\n        res.status(400).send(e.toString())\r\n    })\r\n\r\n};\r\n","import {MongoError, ObjectID} from \"mongodb\";\r\nimport {NextFunction, Request, Response} from \"express\";\r\nimport {flattenObject} from \"../../../../services/flattenObject\";\r\nimport bcrypt from \"bcryptjs\";\r\nimport {Connection} from \"../../../../services/connectMongo\";\r\nimport {responseReducer} from \"../../../../services/responseReducer\";\r\n\r\nconst updateUserInDatabase = (userId: string, updateableObject: object) => {\r\n\r\n}\r\n//const { ObjectID } = require('mongodb').ObjectID\r\n\r\nexport const updateCurrentCourse = (req: Request, res: Response, next: NextFunction) => {\r\n    const flatBody = flattenObject(req.body)\r\n    //Auth\r\n    //authenticate(req, res, next)\r\n    const updateData = async () => {\r\n        //FindOneAndUpdate\r\n        let course;\r\n        if (req.params.courseId) {\r\n            course = await Connection.db.collection(\"courses\").aggregate([{\r\n                    $match: {\"_id\": new ObjectID(req.params.courseId)}\r\n                }, {\r\n                    '$addFields': {\r\n                        'videos': {\r\n                            '$filter': {\r\n                                'input': '$items',\r\n                                'cond': {\r\n                                    '$eq': [\r\n                                        '$$this.type', 'video'\r\n                                    ]\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }, {\r\n                    '$addFields': {\r\n                        'exams': {\r\n                            '$filter': {\r\n                                'input': '$items',\r\n                                'cond': {\r\n                                    '$eq': [\r\n                                        '$$this.type', 'exam'\r\n                                    ]\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }, {\r\n                    '$lookup': {\r\n                        'from': 'videos',\r\n                        'let': {\"localVideos\": \"$videos\"},\r\n                        'pipeline': [{\r\n                            '$match': {\r\n                                '$expr': {\r\n                                    '$filter': {\r\n                                        'input': '$$localVideos',\r\n                                        'as': 'video',\r\n                                        'cond': {\r\n                                            '$eq': [\r\n                                                '$_id', {$toObjectId: '$$video.itemId'}\r\n                                            ]\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n\r\n                        }],\r\n                        'as': 'videosWithData'\r\n                    }\r\n                }, {\r\n                    '$lookup': {\r\n                        'from': 'exams',\r\n                        'let': {\"localExams\": \"$exams\"},\r\n                        'pipeline': [{\r\n                            '$match': {\r\n                                '$expr': {\r\n                                    '$filter': {\r\n                                        'input': '$$localExams',\r\n                                        'as': 'exam',\r\n                                        'cond': {\r\n                                            '$eq': [\r\n                                                '$_id', {$toObjectId: '$$exam.itemId'}\r\n                                            ]\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n\r\n                        }],\r\n                        'as': 'examsWithData'\r\n                    }\r\n                }, {\r\n                    '$addFields': {\r\n                        'videosWithAllData': {\r\n                            '$map': {\r\n                                'input': '$videos',\r\n                                'as': 'video',\r\n                                'in': {\r\n                                    '$mergeObjects': [\r\n                                        '$$video', {\r\n                                            '$arrayElemAt': [\r\n                                                {\r\n                                                    '$filter': {\r\n                                                        'input': '$videosWithData',\r\n                                                        'as': 'extVideo',\r\n                                                        'cond': {\r\n                                                            '$eq': [\r\n                                                                {$toObjectId: '$$video.itemId'}, '$$extVideo._id'\r\n                                                            ]\r\n                                                        }\r\n                                                    }\r\n                                                }, 0\r\n                                            ]\r\n                                        }\r\n                                    ]\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }, {\r\n                    '$addFields': {\r\n                        'examsWithAllData': {\r\n                            '$map': {\r\n                                'input': '$exams',\r\n                                'as': 'exam',\r\n                                'in': {\r\n                                    '$mergeObjects': [\r\n                                        '$$exam', {\r\n                                            '$arrayElemAt': [\r\n                                                {\r\n                                                    '$filter': {\r\n                                                        'input': '$examsWithData',\r\n                                                        'as': 'extExam',\r\n                                                        'cond': {\r\n                                                            '$eq': [\r\n                                                                {$toObjectId: '$$exam.itemId'}, '$$extExam._id'\r\n                                                            ]\r\n                                                        }\r\n                                                    }\r\n                                                }, 0\r\n                                            ]\r\n                                        }\r\n                                    ]\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }, {\r\n                    '$addFields': {\r\n                        'allItems': {\r\n                            '$concatArrays': [\r\n                                '$videosWithAllData', '$examsWithAllData'\r\n                            ]\r\n                        }\r\n                    }\r\n                }, {\r\n                    '$project': {\r\n                        \"_id\": 1,\r\n                        \"name\": 1,\r\n                        \"thumbnailUrl\": 1,\r\n                        \"tags\": 1,\r\n                        \"category\": 1,\r\n                        \"courseGroup\": 1,\r\n                        \"permissionLevel\": 1,\r\n                        \"organizationId\": 1,\r\n                        \"creatorId\": 1,\r\n                        \"teacherId\": 1,\r\n                        \"teacherName\": 1,\r\n                        \"items\": \"$allItems\"\r\n                    }\r\n            }]).toArray()\r\n\r\n        } else {\r\n            throw new Error(\"Hibás kérés\")\r\n        }\r\n        if (!course) {\r\n            throw new Error(\"Nincs ilyen kurzus\")\r\n        } else {\r\n            await Connection.db.collection(\"users\").findOneAndUpdate({\r\n                \"_id\": new ObjectID(req.params.userId)\r\n            }, {\r\n                $set: flattenObject({\r\n                    \"userData\": {\r\n                        \"currentCourseId\": req.params.courseId,\r\n                        \"currentItemId\": course[0].items[0]._id + \"\"\r\n                    }\r\n                })\r\n            }, {\r\n                upsert: false,\r\n                new: true\r\n            } as any, (err: MongoError) => {\r\n                if (err) {\r\n                    throw new Error(\"Az adatok frissítése sikertelen!\" + err)\r\n                }\r\n            })\r\n            return responseReducer(201, course[0])\r\n        }\r\n\r\n    }\r\n    updateData().then((r) => {\r\n        res.status(r.responseStatus).send(r.responseText)\r\n    }).catch(next)\r\n};\r\n","import {Connection} from \"../../../../services/connectMongo\";\r\nimport {MongoError, ObjectID} from \"mongodb\";\r\nimport {NextFunction, Request, Response} from \"express\";\r\nimport {flattenObject} from \"../../../../services/flattenObject\";\r\nimport {responseReducer} from \"../../../../services/responseReducer\";\r\n\r\n\r\nconst updateUserInDatabase = (userId: string, updateableObject: object) => {\r\n    Connection.db.collection(\"users\").findOneAndUpdate({\r\n        \"_id\": new ObjectID(userId)\r\n    }, {\r\n        $set: updateableObject\r\n    }, {\r\n        upsert: false,\r\n        new: true\r\n    } as any, (err: MongoError) => {\r\n        if (err) {\r\n            throw new Error(\"Az adatok frissítése sikertelen!\" + err)\r\n        }\r\n    })\r\n}\r\n//const { ObjectID } = require('mongodb').ObjectID\r\n\r\nexport const updateCurrentItem = (req: Request, res: Response, next: NextFunction) => {\r\n    const flatBody = flattenObject(req.body)\r\n    //Auth\r\n    //authenticate(req, res, next)\r\n    const updateData = async () => {\r\n        const currentItem = await Connection.db.collection(\"courses\").aggregate([\r\n            {\r\n                '$addFields': {\r\n                    'videos': {\r\n                        '$filter': {\r\n                            'input': '$items',\r\n                            'cond': {\r\n                                '$eq': [\r\n                                    '$$this.type', 'video'\r\n                                ]\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }, {\r\n                '$addFields': {\r\n                    'exams': {\r\n                        '$filter': {\r\n                            'input': '$items',\r\n                            'cond': {\r\n                                '$eq': [\r\n                                    '$$this.type', 'exam'\r\n                                ]\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }, {\r\n                '$lookup': {\r\n                    'from': 'videos',\r\n                    'let': {\"localVideos\": \"$videos\"},\r\n                    'pipeline': [{\r\n                        '$match': {\r\n                            '$expr': {\r\n                                '$filter': {\r\n                                    'input': '$$localVideos',\r\n                                    'as': 'video',\r\n                                    'cond': {\r\n                                        '$eq': [\r\n                                            '$_id', {$toObjectId: '$$video.itemId'}\r\n                                        ]\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                    }],\r\n                    'as': 'videosWithData'\r\n                }\r\n            }, {\r\n                '$lookup': {\r\n                    'from': 'exams',\r\n                    'let': {\"localExams\": \"$exams\"},\r\n                    'pipeline': [{\r\n                        '$match': {\r\n                            '$expr': {\r\n                                '$filter': {\r\n                                    'input': '$$localExams',\r\n                                    'as': 'exam',\r\n                                    'cond': {\r\n                                        '$eq': [\r\n                                            '$_id', {$toObjectId: '$$exam.itemId'}\r\n                                        ]\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                    }],\r\n                    'as': 'examsWithData'\r\n                }\r\n            }, {\r\n                '$addFields': {\r\n                    'videosWithAllData': {\r\n                        '$map': {\r\n                            'input': '$videos',\r\n                            'as': 'video',\r\n                            'in': {\r\n                                '$mergeObjects': [\r\n                                    '$$video', {\r\n                                        '$arrayElemAt': [\r\n                                            {\r\n                                                '$filter': {\r\n                                                    'input': '$videosWithData',\r\n                                                    'as': 'extVideo',\r\n                                                    'cond': {\r\n                                                        '$eq': [\r\n                                                            {$toObjectId: '$$video.itemId'}, '$$extVideo._id'\r\n                                                        ]\r\n                                                    }\r\n                                                }\r\n                                            }, 0\r\n                                        ]\r\n                                    }\r\n                                ]\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }, {\r\n                '$addFields': {\r\n                    'examsWithAllData': {\r\n                        '$map': {\r\n                            'input': '$exams',\r\n                            'as': 'exam',\r\n                            'in': {\r\n                                '$mergeObjects': [\r\n                                    '$$exam', {\r\n                                        '$arrayElemAt': [\r\n                                            {\r\n                                                '$filter': {\r\n                                                    'input': '$examsWithData',\r\n                                                    'as': 'extExam',\r\n                                                    'cond': {\r\n                                                        '$eq': [\r\n                                                            {$toObjectId: '$$exam.itemId'}, '$$extExam._id'\r\n                                                        ]\r\n                                                    }\r\n                                                }\r\n                                            }, 0\r\n                                        ]\r\n                                    }\r\n                                ]\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }, {\r\n                '$addFields': {\r\n                    'allItems': {\r\n                        '$concatArrays': [\r\n                            '$videosWithAllData', '$examsWithAllData'\r\n                        ]\r\n                    }\r\n                }\r\n            }, {\r\n                $match: {\r\n                    $expr: {\r\n                        $and: [\r\n                            {\r\n                                $eq: ['$_id',{$toObjectId: req.params.courseId}]\r\n                            },{\r\n                                '$filter': {\r\n                                    'input': '$allItems',\r\n                                    'as': 'allItem',\r\n                                    'cond': {\r\n                                        $eq: [{$toObjectId: '$$allItem._id'},{$toObjectId: req.params.itemId}]\r\n                                    }\r\n                                }\r\n                            }\r\n                        ]\r\n                    }\r\n                }\r\n            }, {\r\n                \"$addFields\": {\r\n                    \"currentItem\": {\r\n                        '$filter': {\r\n                            'input': '$allItems',\r\n                            'as': 'allItem',\r\n                            'cond': {\r\n                                $eq: [{$toObjectId: '$$allItem._id'},{$toObjectId: req.params.itemId}]\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            },{\r\n                $unwind: \"$currentItem\"\r\n            },{\r\n                $project: {\r\n                    \"currentItem\":1,\r\n                    \"currentCourse\": {\r\n                        \"_id\": \"$_id\",\r\n                        \"name\": \"$name\",\r\n                        \"thumbnailUrl\": \"$thumbnailUrl\",\r\n                        \"tags\": \"$tags\",\r\n                        \"category\": \"$category\",\r\n                        \"courseGroup\": \"$courseGroup\",\r\n                        \"permissionLevel\": \"$permissionLevel\",\r\n                        \"items\": \"$allItems\"\r\n                    }\r\n                }\r\n            }\r\n        ]).toArray()\r\n        //FindOneAndUpdate\r\n        if (req.params.itemId && req.params.courseId && req.params.userId && (currentItem[0].currentItem._id == req.params.itemId)) {\r\n            updateUserInDatabase(req.params.userId, {\r\n                \"userData.currentCourseId\": req.params.courseId,\r\n                \"userData.currentItemId\": req.params.itemId\r\n            })\r\n        } else {\r\n            throw new Error(\"Hibás kérés\")\r\n        }\r\n        return responseReducer(201, currentItem[0])\r\n    }\r\n    updateData().then((r) => {\r\n        res.status(r.responseStatus).send(r.responseText)\r\n    }).catch(next)\r\n};\r\n\r\n","import {NextFunction, Request, Response} from \"express\";\r\nimport {MongoError, ObjectID} from \"mongodb\";\r\nimport {flattenObject} from \"../../../../services/flattenObject\";\r\nimport bcrypt from \"bcryptjs\";\r\nimport {UploadedFile} from \"express-fileupload\";\r\nimport {checkFile} from \"../../../../services/checkFile\";\r\nimport {createFile} from \"../../../../services/fileServices\";\r\nimport jwt from 'jsonwebtoken';\r\nimport {config} from \"../../../../configuration/config\";\r\n\r\nconst {responseReducer} = require('../../../../services/responseReducer')\r\nconst { Connection } = require('../../../../services/connectMongo')\r\n\r\nconst updateUserInDatabase = (userId: string, updateableObject: object) => {\r\n    Connection.db.collection(\"users\").findOneAndUpdate({\r\n        \"_id\": new ObjectID(userId)\r\n    }, {\r\n        $set: updateableObject\r\n    }, {\r\n        upsert: false,\r\n        new: true\r\n    } as any, (err: MongoError) => {\r\n        if (err) {\r\n            throw new Error(\"Az adatok frissítése sikertelen!\" + err)\r\n        }\r\n    })\r\n}\r\n//const { ObjectID } = require('mongodb').ObjectID\r\n\r\nexport const updateUser = (req: Request, res: Response, next: NextFunction) => {\r\n\r\n    const flatBody = flattenObject(req.body)\r\n    //Auth\r\n    //authenticate(req, res, next)\r\n    const updateData = async () => {\r\n        //FindOneAndUpdate\r\n        if (!req.body.currentPassword && req.body.newPassword) {\r\n            let uploadedFile: UploadedFile\r\n\r\n            const authHeader = req.headers.authorization\r\n            let userData: {\r\n                email: string\r\n                userId: string\r\n            } | undefined\r\n            if (authHeader) {\r\n                const token = authHeader.split(' ')[1];\r\n\r\n                jwt.verify(token, config.tokenMailSecret, (err, user) => {\r\n                    if (err) {\r\n                        throw new Error(\"A token ellenőrzése sikertelen\")\r\n                    }\r\n                    userData = user as {email: string, userId: string}\r\n                })\r\n            }\r\n            if (req.files) {\r\n                uploadedFile = req.files.file as UploadedFile\r\n                createFile(uploadedFile, `/var/lib/assets/epistogram@development/users/${req.params.userId}/`, \"avatar\")\r\n            }\r\n            //checkFile(req, res, next)\r\n            let hashedPassword;\r\n            hashedPassword = await bcrypt.hash(req.body.newPassword, 12);\r\n\r\n\r\n            await updateUserInDatabase(userData != undefined ? userData.userId : \"\" , {\r\n                \"userData.phoneNumber\": req.body.phoneNumber,\r\n                \"userData.password\": hashedPassword\r\n            })\r\n\r\n        } else if (req.body.currentPassword && req.body.newPassword) {\r\n            let user;\r\n            try {\r\n                user = await Connection.db.collection(\"users\").findOne({\"_id\": new ObjectID(req.params.userId)})\r\n            } catch (e) {\r\n                throw new Error(\"A jelszó beállítása sikertelen: DB\")\r\n            }\r\n\r\n            try {\r\n                const isMatch = await bcrypt.compare(req.body.currentPassword, user.userData.password);\r\n                if (!isMatch) {\r\n                    const err = new Error(\"A jelszó beállítása sikertelen: Bcrypt\")\r\n                    return next(err)\r\n                }\r\n            } catch (e) {\r\n                return next(e)\r\n            }\r\n            let hashedPassword;\r\n\r\n            hashedPassword = await bcrypt.hash(req.body.newPassword, 12);\r\n\r\n           /* await updateUserInDatabase(req.params.userId, {\r\n                \"userData.password\": hashedPassword\r\n            })*/\r\n        } else {\r\n           // await updateUserInDatabase(req.params.userId, flattenObject(flatBody))\r\n        }\r\n        return responseReducer(201, \"Az adatok frissítése sikeres!\")\r\n    }\r\n    updateData().then((r) => {\r\n        res.status(r.responseStatus).send(r.responseText)\r\n    }).catch(next)\r\n};\r\n","import Email from 'email-templates';\r\n\r\nimport {checkRequest} from '../../../../services/checkRequest'\r\nimport {checkUser} from '../../../../services/checkUser'\r\nimport {config} from '../../../../configuration/config'\r\nimport {Connection} from '../../../../services/connectMongo'\r\nimport {Request, NextFunction, Response} from \"express\";\r\nimport {responseReducer} from \"../../../../services/responseReducer\";\r\nimport {ObjectID} from \"mongodb\";\r\nimport {emailConfig, emailContent} from \"../../../../emails/email\";\r\nimport {generateToken} from \"../../../../services/generateToken\";\r\nimport bcrypt from \"bcryptjs\";\r\nimport {createDirectory} from \"jest-util\";\r\n\r\n\r\nexport const signup = (req: Request, res: Response, next: NextFunction) => {\r\n    const registrationData = [\"email\", \"role\", \"username\", \"firstName\", \"lastName\", \"organizationId\", \"innerRole\"]\r\n    checkRequest(req, res, next, registrationData)\r\n    const createUser = async () => {\r\n        let insertedId: string\r\n        await checkUser(req, res, next)\r\n        let createdUser: {\r\n            _id?: string\r\n            userData: {\r\n                active: boolean,\r\n                email: string,\r\n                role: string,\r\n                username: string,\r\n                firstName: string,\r\n                lastName: string,\r\n                organizationId: ObjectID,\r\n                password: string,\r\n                innerRole: string\r\n            }\r\n        } = {\r\n            userData: {\r\n                active: true,\r\n                email: req.body.email,\r\n                role: req.body.role,\r\n                username: req.body.username,\r\n                firstName: req.body.firstName,\r\n                lastName: req.body.lastName,\r\n                organizationId: req.body.organizationId, //TODO: tényleges cégellenőrzést beletenni\r\n                password: await bcrypt.hash(\"abcd\", 12),\r\n                innerRole: req.body.innerRole\r\n            }\r\n        }\r\n\r\n        let insertedUser\r\n        try {\r\n            insertedUser = await Connection.db.collection(\"users\").insertOne(createdUser)\r\n        } catch (e) {\r\n            throw new Error(\"Shit heppönsz\" + e.toString())\r\n        }\r\n        const mailToken = await generateToken(req,res,next, insertedUser.insertedId, createdUser.userData.email)\r\n\r\n        await new Email(emailConfig).send(emailContent(req.body.email, `${req.body.lastName} ${req.body.firstName}`, `${config.frontendUrl}/signup`, mailToken)).catch((err: string) => {\r\n            throw new Error('Signing up failed, please try again later.' + err);\r\n        });\r\n\r\n        return responseReducer(201, \"Sikeres regisztráció\")\r\n    }\r\n\r\n    createUser().then((r) => {\r\n        res.status(r.responseStatus).send(r.responseText)\r\n    }).catch((e) => {\r\n        res.status(400).send(e.toString())\r\n    })\r\n\r\n};\r\n","import {Router} from \"express\";\nexport const router = Router()\n\nimport {getUsers} from \"./controllers/GET/getUsers\"\nimport {login} from \"./controllers/GET/login\"\nimport {signup} from \"./controllers/PUT/signup\"\nimport {deleteUser} from \"./controllers/DELETE/deleteUser\";\nimport {updateUser} from \"./controllers/PATCH/updateUser\";\nimport {resetUser} from \"./controllers/GET/resetUser\";\nimport {newGetUser} from \"./controllers/GET/newGetUser\";\nimport {updateCurrentItem} from \"./controllers/PATCH/updateCurrentItem\";\nimport {updateCurrentCourse} from \"./controllers/PATCH/updateCurrentCourse\";\nimport {updateActivity} from \"./controllers/PATCH/updateActivity\";\n\nrouter.get('/login', login);\n\nrouter.get(\"/\", getUsers)\nrouter.post(\"/\", signup)\nrouter.patch(\"/\", updateUser)\n\nrouter.patch(\"/activity\", updateActivity)\n\nrouter.get(\"/:userId\", newGetUser);\nrouter.patch(\"/:userId\", updateUser);\nrouter.delete(\"/:userId\", deleteUser)\n\nrouter.patch(\"/:userId/course/:courseId\", updateCurrentCourse)\nrouter.patch(\"/:userId/course/:courseId/item/:itemId\", updateCurrentItem)\n\nrouter.get(\"/:userId/reset\", resetUser);\n","import {Request, Response, NextFunction} from \"express\";\r\nimport {ObjectID} from \"mongodb\";\r\n\r\nconst {responseReducer} = require('../../../../services/responseReducer')\r\nconst { Connection } = require('../../../../services/connectMongo')\r\n\r\nexport const getVideo = (req: Request, res: Response, next: NextFunction) => {\r\n    const fetchCourses = async () => {\r\n        const video = await Connection.db.collection(\"videos\").aggregate([\r\n            {\r\n                '$lookup': {\r\n                    'from': 'courses',\r\n                    'let': {\r\n                        'courseId': {\r\n                            '$toObjectId': '$courseId'\r\n                        }\r\n                    },\r\n                    'pipeline': [\r\n                        {\r\n                            '$match': {\r\n                                '$expr': {\r\n                                    '$eq': [\r\n                                        '$_id', '$$courseId'\r\n                                    ]\r\n                                }\r\n                            }\r\n                        }\r\n                    ],\r\n                    'as': 'courses'\r\n                }\r\n            }, {\r\n                '$unwind': {\r\n                    'path': '$courses',\r\n                    'preserveNullAndEmptyArrays': true\r\n                }\r\n            },{\r\n                $match: {\"_id\": new ObjectID(req.params.videoId + \"\")}\r\n            }, {\r\n                '$addFields': {\r\n                    'courseTagsAsArrayOfObject': {\r\n                        '$map': {\r\n                            'input': '$tags',\r\n                            'as': 'line',\r\n                            'in': {\r\n                                '$mergeObjects': [\r\n                                    {\r\n                                        '_id': '$$line'\r\n                                    }\r\n                                ]\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }, {\r\n                '$lookup': {\r\n                    'from': 'tags',\r\n                    'pipeline': [],\r\n                    'as': 'tagsFromCollection'\r\n                }\r\n            }, {\r\n                '$addFields': {\r\n                    'doneTags': {\r\n                        '$map': {\r\n                            'input': '$courseTagsAsArrayOfObject',\r\n                            'as': 'line',\r\n                            'in': {\r\n                                '$filter': {\r\n                                    'input': '$tagsFromCollection',\r\n                                    'as': 'linee',\r\n                                    'cond': {\r\n                                        '$eq': ['$$linee._id', {$toObjectId: '$$line._id'}]\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }, {\r\n                '$addFields': {\r\n                    'doneTagsAsObjects': {\r\n                        '$map': {\r\n                            'input': '$doneTags',\r\n                            'as': 'line',\r\n                            'in': {\r\n                                '$mergeObjects': '$$line'\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            },{\r\n                '$lookup': {\r\n                    'from': 'overlays',\r\n                    'let': {\r\n                        'inOverlays': '$overlays'\r\n                    },\r\n                    'pipeline': [\r\n                        {\r\n                            '$match': {\r\n                                '$expr': {\r\n                                    '$map': {\r\n                                        \"input\": \"$$inOverlays\",\r\n                                        \"as\": \"overlay\",\r\n                                        \"in\": {\r\n                                            '$eq': [\r\n                                                '$_id', '$$overlay._id'\r\n                                            ]\r\n                                        }\r\n                                    },\r\n\r\n                                }\r\n                            }\r\n                        }\r\n                    ],\r\n                    'as': 'allOverlays'\r\n                }\r\n            },{\r\n                $project: {\r\n                    \"_id\": 1,\r\n                    \"thumbnailUrl\": 1,\r\n                    \"title\": 1,\r\n                    \"subTitle\": 1,\r\n                    \"length\": 1,\r\n                    \"watchCount\": \"0\",\r\n                    \"description\": 1,\r\n                    \"url\": 1,\r\n                    \"overlays\": '$allOverlays',\r\n                    \"tags\": \"$doneTagsAsObjects\",\r\n                    \"showAutomaticOverlay\": 1,\r\n                    \"courseName\": \"$courses.name\",\r\n                }\r\n            }]).toArray()\r\n        return responseReducer(200, video[0])\r\n    }\r\n    fetchCourses().then((r) => {\r\n        res.status(r.responseStatus).send(r.responseText)\r\n    }).catch(next)\r\n};\r\n","import {Request, Response, NextFunction} from \"express\";\r\n\r\nconst {responseReducer} = require('../../../../services/responseReducer')\r\nconst { Connection } = require('../../../../services/connectMongo')\r\n//const { ObjectID } = require('mongodb').ObjectID\r\n\r\nexport const getVideos = (req: Request, res: Response, next: NextFunction) => {\r\n    const fetchCourses = async () => {\r\n        const videos = await Connection.db.collection(\"videos\").aggregate([\r\n            { $lookup:\r\n                    {\r\n                        from: \"courses\",\r\n                        localField: \"courseId\",\r\n                        foreignField: \"_id\",\r\n                        as: \"courses\"\r\n                    },\r\n            }, {\r\n                $unwind: \"$courses\"\r\n            },{\r\n                $project: {\r\n                    \"_id\": 1,\r\n                    \"videoThumbnailUrl\": 1,\r\n                    \"videoMainTitle\": 1,\r\n                    \"videoSubTitle\": 1,\r\n                    \"videoLength\": 1,\r\n                    \"videoWatchCount\": \"0\",\r\n                    \"overlaysCount\": {\r\n                        \"$cond\": {\r\n                            \"if\": {\r\n                                \"$isArray\": \"$overlays\"\r\n                            },\r\n                            \"then\": {\r\n                                \"$size\": \"$overlays\"\r\n                            },\r\n                            \"else\": 0\r\n                        }\r\n                    },\r\n                    \"courseName\": \"$courses.name\",\r\n                    \"courses\": \"$courses\",\r\n                    \"courseItems\": \"$courses.items\"\r\n                }\r\n            }, {\r\n                $match: {\r\n                    $and: [\r\n                        { \"videoMainTitle\": (new RegExp(req.query.searchData as string, 'i'))}\r\n                    ]\r\n                }\r\n            }]).toArray()\r\n        return responseReducer(200, videos)\r\n    }\r\n    fetchCourses().then((r) => {\r\n        res.status(r.responseStatus).send(r.responseText)\r\n    }).catch(next)\r\n};","import { ObjectID } from \"mongodb\";\r\nimport {Connection} from \"../../../services/connectMongo\";\r\nimport {responseReducer} from \"../../../services/responseReducer\";\r\nimport { Request, Response, NextFunction } from \"express\";\r\n\r\nexport const addOverlayAnswer = (req: Request, res: Response, next: NextFunction) => {\r\n    const updateData = async () => {\r\n        //FindOneAndUpdate\r\n        try {\r\n            await Connection.db.collection(\"videos\").updateOne({\"_id\": new ObjectID(req.params.itemId)}, {\r\n                \"$push\": {\r\n                    \"overlays.$[].answers\": {\r\n                        \"_id\": new ObjectID(),\r\n                        ...req.body\r\n                    }\r\n\r\n                }\r\n            })\r\n        } catch (e) {\r\n            throw new Error(\"Shit heppönsz\" + e.toString())\r\n        }\r\n        return responseReducer(201, \"Az adatok frissítése sikeres!\")\r\n    }\r\n    updateData().then((r) => {\r\n        res.status(r.responseStatus).send(r.responseText)\r\n    }).catch(next)\r\n}\r\n","import {Connection} from \"../../../services/connectMongo\";\r\nimport {responseReducer} from \"../../../services/responseReducer\";\r\nimport { Request, Response, NextFunction } from \"express\";\r\nimport { ObjectID } from \"mongodb\";\r\nimport {flattenObject} from \"../../../services/flattenObject\";\r\n\r\n\r\nexport const addToVideo = (req: Request, res: Response, next: NextFunction) => {\r\n    const updateData = async () => {\r\n        //FindOneAndUpdate\r\n        try {\r\n            await Connection.db.collection(\"videos\").updateOne({\"_id\": new ObjectID(req.params.itemId)}, {\r\n                $push: req.body\r\n            })\r\n        } catch (e) {\r\n            throw new Error(\"Shit heppönsz\" + e.toString())\r\n        }\r\n        return responseReducer(201, \"Az adatok frissítése sikeres!\")\r\n    }\r\n    updateData().then((r) => {\r\n        res.status(r.responseStatus).send(r.responseText)\r\n    }).catch(next)\r\n}\r\n","import {Connection} from \"../../../services/connectMongo\";\r\nimport {responseReducer} from \"../../../services/responseReducer\";\r\nimport { Request, Response, NextFunction } from \"express\";\r\nimport { ObjectID } from \"mongodb\";\r\nimport {flattenObject} from \"../../../services/flattenObject\";\r\n\r\n\r\nexport const editVideo = (req: Request, res: Response, next: NextFunction) => {\r\n    const updateData = async () => {\r\n        //FindOneAndUpdate\r\n        try {\r\n            await Connection.db.collection(\"videos\").updateOne({\"_id\": new ObjectID(req.params.itemId)}, {\r\n                $set: flattenObject(req.body)\r\n            })\r\n        } catch (e) {\r\n            throw new Error(\"Shit heppönsz\" + e.toString())\r\n        }\r\n        return responseReducer(201, \"Az adatok frissítése sikeres!\")\r\n    }\r\n    updateData().then((r) => {\r\n        res.status(r.responseStatus).send(r.responseText)\r\n    }).catch(next)\r\n}\r\n","import {Connection} from \"../../../services/connectMongo\";\r\nimport {responseReducer} from \"../../../services/responseReducer\";\r\nimport { Request, Response, NextFunction } from \"express\";\r\nimport { ObjectID } from \"mongodb\";\r\nimport {flattenObject} from \"../../../services/flattenObject\";\r\n\r\n\r\nexport const removeFromVideo = (req: Request, res: Response, next: NextFunction) => {\r\n    const updateData = async () => {\r\n        //FindOneAndUpdate\r\n        try {\r\n            await Connection.db.collection(\"videos\").updateOne({\"_id\": new ObjectID(req.params.itemId)}, {\r\n                $pull: req.body\r\n            })\r\n        } catch (e) {\r\n            throw new Error(\"Shit heppönsz\" + JSON.stringify(req.body))\r\n        }\r\n        return responseReducer(201, \"Az adatok frissítése sikeres!\")\r\n    }\r\n    updateData().then((r) => {\r\n        res.status(r.responseStatus).send(r.responseText)\r\n    }).catch(next)\r\n}\r\n","import {Connection} from \"../../../services/connectMongo\";\r\nimport {createFile, getFileExtension} from \"../../../services/fileServices\";\r\nimport {responseReducer} from \"../../../services/responseReducer\";\r\nimport {Request, Response, NextFunction} from 'express'\r\nimport { UploadedFile } from \"express-fileupload\";\r\nimport {flattenObject} from \"../../../services/flattenObject\";\r\nimport { ObjectID } from \"mongodb\";\r\nimport {config} from \"../../../configuration/config\";\r\n\r\nexport const uploadVideoImage = (req: Request, res: Response, next: NextFunction) => {\r\n    let uploadedFile: UploadedFile\r\n    const updateData = async () => {\r\n        const isItVideo = await Connection.db.collection(\"videos\").findOne({\"_id\": new ObjectID(req.params.itemId)})\r\n        //const isItExam = await Connection.db.collection(\"exams\").findOne({\"_id\": new ObjectID(req.params.itemId)})\r\n        if (req.files) {\r\n            uploadedFile = req.files.file as UploadedFile\r\n        }\r\n        isItVideo ? createFile(uploadedFile, `/var/lib/assets/epistogram@development/videos/`, req.params.itemId): createFile(uploadedFile, `/var/lib/assets/epistogram@development/exams/`, req.params.itemId)\r\n        isItVideo && await Connection.db.collection(\"videos\").updateOne({\"_id\": new ObjectID(req.params.itemId)}, {\r\n            $set: {\r\n                videoThumbnailUrl: \"https://dev.epistogram.com/assets/epistogram/videos/\" + req.params.itemId + \".\" + getFileExtension(uploadedFile.name)\r\n            }\r\n        })\r\n        return responseReducer(201, \"Adatok hozzáadva az adatbázishoz \")\r\n    }\r\n    updateData().then((r) => {\r\n        res.status(r.responseStatus).send(r.responseText)\r\n    }).catch((e) => {\r\n        res.status(400).send(e.responseText)\r\n    });\r\n};","import {Router} from \"express\";\r\nexport const router = Router()\r\n\r\n\r\nimport {getVideos} from './controllers/GET/getVideos'\r\nimport {getVideo} from \"./controllers/GET/getVideo\";\r\nimport {addToVideo} from \"./controllers/addToVideo\";\r\nimport {editVideo} from \"./controllers/editVideo\";\r\nimport {removeFromVideo} from \"./controllers/removeFromVideo\";\r\nimport {uploadVideoImage} from \"./controllers/uploadVideoImage\";\r\nimport {addOverlayAnswer} from \"./controllers/addOverlayAnswer\";\r\n//const uploadVideo = require('./controllers/updateMethods/uploadVideo')\r\n\r\nrouter.get('/video/:videoId', getVideo)\r\nrouter.get('/', getVideos);\r\n\r\nrouter.put('/video/:itemId', addToVideo)\r\nrouter.put('/video/:itemId/overlay/answer', addOverlayAnswer)\r\nrouter.patch('/video/:itemId', editVideo)\r\nrouter.patch('/video/:itemId/remove', removeFromVideo)\r\n//router.post('/uploadvideo', uploadVideo);\r\nrouter.put('/video/:itemId/image', uploadVideoImage);\r\n","//import {config} from '../../configuration/config'\r\n\r\n//import {verifyFile} from '../files/middlewares/verifyFile'\r\n//import {createFile, searchImages} from \"../../services/fileServices\"\r\nimport { Connection } from '../../services/connectMongo'\r\nimport {responseReducer} from '../../services/responseReducer'\r\nimport { ObjectId } from 'mongodb'\r\nimport { checkRequest } from '../../services/checkRequest'\r\nimport {Request, Response, NextFunction} from \"express\";\r\n\r\nexport const getVote = (req: Request, res: Response, next: NextFunction) => {\r\n    checkRequest(req, res, next, [\"_id\"])\r\n    const aszink = async () => {\r\n        const vote = await  Connection.db.collection(\"votes\").findOne({\"active\": true});\r\n        const user = await Connection.db.collection(\"users\").findOne({$and: [\r\n            {\"_id\": new ObjectId(req.query._id as string)},\r\n            {\"voteStats.voteId\": vote._id}]})\r\n        if (!vote) {\r\n            responseReducer(400, \"Jelenleg nem érhető el egyetlen szavazás sem\")\r\n        } else if (user === null) {\r\n            responseReducer(200, {\r\n                \"responseText\": \"Még nem szavaztál\",\r\n                \"_id\": vote._id,\r\n                \"voteQuestion\": vote.voteQuestion,\r\n                \"voteFirstAnswerName\": vote.voteFirstAnswerName,\r\n                \"voteFirstAnswerPath\": vote.voteFirstAnswerPath,\r\n                \"voteSecondAnswerName\": vote.voteSecondAnswerName,\r\n                \"voteSecondAnswerPath\": vote.voteSecondAnswerPath\r\n            })\r\n        } else {\r\n            responseReducer(200, {\r\n                \"responseText\": \"Már szavaztál\",\r\n                \"voteAnswersCount\": vote.voteAnswersCount,\r\n                \"voteFirstAnswerName\": vote.voteFirstAnswerName,\r\n                \"voteFirstAnswerCount\": vote.voteFirstAnswerCount,\r\n                \"voteSecondAnswerName\": vote.voteSecondAnswerName,\r\n                \"voteSecondAnswerCount\": vote.voteSecondAnswerCount\r\n            })\r\n        }\r\n    }\r\n    aszink().then(r => {\r\n\r\n    }).catch(e => {\r\n\r\n    })\r\n};\r\n\r\nexport const getVotes = (req: Request, res: Response) => {\r\n    const fetchData = async () => {\r\n        const allVotes = await Connection.db.collection(\"votes\").find({}).toArray()\r\n        return responseReducer(200, allVotes)\r\n    }\r\n    fetchData().then((r) => {\r\n        res.status(r.responseStatus).send(r.responseText)\r\n    }).catch((e) => {\r\n        res.status(e.responseStatus).send(e.responseText)\r\n    })\r\n\r\n};\r\n\r\nexport const uploadVote = (req: Request, res: Response, next: NextFunction) => {\r\n    /*verifyFile(req,res,next)\r\n    const aszink = async () => {\r\n        const path = `${config.uploadFolderPath}/votes/${req.body.voteName}`;\r\n\r\n        req.files.files.map((file,index) => {\r\n            const name = file.name\r\n            const fileExtension = (name.substr(name.lastIndexOf('.') + 1));\r\n            if (index === 0) {\r\n                createFile(file, path, \"voteFirstAnswerCount\" + \".\" + fileExtension)\r\n            } else if (index === 1) {\r\n                createFile(file, path, \"voteSecondAnswerCount\" + \".\" + fileExtension)\r\n            } else {\r\n                console.log(\"Több képet próbáltál feltölteni 2-nél\")\r\n            }\r\n        })\r\n        const imagePaths = await searchImages(path)\r\n\r\n        Votes.updateMany({\"active\": true}, {$set : {\"active\": false} }, {multi: true}, (err) => {});\r\n        const createdVote = await new Votes({\r\n            voteName: req.body.voteName,\r\n            voteQuestion: req.body.voteQuestion,\r\n            voteAnswersCount: 0,\r\n            voteFirstAnswerName: req.body.voteFirstAnswerName,\r\n            voteFirstAnswerCount: 0,\r\n            voteFirstAnswerPath: `${config.backendUrlMinimal}/uploads/votes/${req.body.voteName}/${imagePaths[0]}`,\r\n            voteSecondAnswerName: req.body.voteSecondAnswerName,\r\n            voteSecondAnswerCount: 0,\r\n            voteSecondAnswerPath: `${config.backendUrlMinimal}/uploads/votes/${req.body.voteName}/${imagePaths[1]}`,\r\n            active: true,\r\n        });\r\n\r\n        await createdVote.save(error => {\r\n            if (error === \"undefined\" || error != null) {\r\n                return error\r\n            } else {\r\n                return \"siker\"\r\n            }\r\n        });\r\n    }\r\n    aszink(req,res,next).then(() => {\r\n        res.status(200).send(\"Siker\")\r\n    }).catch((error) => {\r\n        res.status(404).send(\"Sikernt\" + error)\r\n    })*/\r\n\r\n};\r\n\r\nexport const updateVote = (req: Request, res: Response, next: NextFunction) => {\r\n    /*const aszink = async () => {\r\n        const vote = await Votes.findOne({\"_id\": req.query.voteId})\r\n        const user = await User.findOne({\"_id\": req.query.userId}).elemMatch(\"userStats.doneVotes\",{voteId: req.query.voteId})\r\n        if (vote === null || req.query.voteValue === undefined) {\r\n            return responseReducer(400, \"Sikertelen szavazás\")\r\n        } else if (user === null) {\r\n            const user = await User.findOne({\"_id\": req.query.userId})\r\n            user.userStats.doneVotes.push({\r\n                voteId: req.query.voteId,\r\n                voteValue: req.query.voteValue\r\n            })\r\n            user.save()\r\n            vote[req.query.voteValue]++\r\n            vote.voteAnswersCount++\r\n            vote.save()\r\n            return responseReducer(200, \"Sikeres szavazás\")\r\n        } else {\r\n            return responseReducer(200, \"Már szavaztál\")\r\n        }\r\n    }\r\n    aszink().then(r => {\r\n        res.status(r.responseStatus).send(r.responseText)\r\n    })*/\r\n};\r\n\r\n","import {Request, Response, NextFunction} from \"express\";\r\n\r\nconst {responseReducer} = require('../../../../services/responseReducer')\r\nconst { Connection } = require('../../../../services/connectMongo')\r\n//const { ObjectID } = require('mongodb').ObjectID\r\n\r\nexport const getVotes = (req: Request, res: Response, next: NextFunction) => {\r\n    const fetchCourses = async () => {\r\n        const votes = await Connection.db.collection(\"votes\").aggregate([]).toArray()\r\n        return responseReducer(200, votes)\r\n    }\r\n    fetchCourses().then((r) => {\r\n        res.status(r.responseStatus).send(r.responseText)\r\n    }).catch(next)\r\n};","import {Router} from \"express\";\nexport const router = Router()\n\nimport {getVotes} from './controllers/GET/getVotes'\nimport {getVote, updateVote, uploadVote} from './controller';\n\nrouter.get('/getvote', getVote);\nrouter.get('/getvotes', getVotes)\nrouter.post('/uploadvote', uploadVote);\nrouter.get('/updatevote', updateVote);\n\n","export const config = {\r\n    //backendUrl: \"http://localhost:5000\",\r\n    //backendUrlMinimal: \"http://localhost:5000\",\r\n    uploadFolderPath: \"/Users/spenc\",\r\n    //frontendUrl: \"http://localhost:3000\",\r\n\r\n    backendUrl: \"https://dev.epistogram.com/api\",\r\n    backendUrlMinimal: \"https://dev.epistogram.com\",\r\n    frontendUrl: \"https://dev.epistogram.com\",\r\n\r\n    database: {\r\n        serverUrl: \"80.77.112.163:27017\",\r\n        dbName: \"epistogramdb\",\r\n        dbUsername: \"epistogrambackend\",\r\n        dbPassword: \"Arorer243\"\r\n    },\r\n\r\n    tokenSecret: \"AROWILLSAVETHEAPP\",\r\n\r\n\r\n    tokenMailSecret: \"AROWILLSAVETHEMAIL\",\r\n    mailHost: \"mail.privateemail.com\",\r\n    senderEmail: \"private@spenglermanfred.com\",\r\n    senderPassword: \"Arorer243*\",\r\n\r\n    scpConfig: {\r\n        host: '80.77.112.163',\r\n        port: 22,\r\n        username: 'spenglermanfred',\r\n        //privateKey: require('fs').readFileSync('/Users/spenc/Documents/putty_id_rsa.ppk') + \"\",\r\n        passphrase: \"MrPeach243Cock*\"\r\n    }\r\n}\r\n","import {transporter} from './transporter'\nimport {config} from \"../configuration/config\";\n\nexport const emailConfig = {\n    message: {\n      from: config.senderEmail\n    },\n    send: true,\n    transport: transporter,\n    views: {\n      options: {\n        extension: \"hbs\",\n        map: {\n          \"hbs\": \"handlebars\"\n        }\n      }\n    },\n    preview: false\n}\n\nexport const emailContent = (email: string, name: string, url: string, mailToken: string) => {\n    return {\n        template: \"setpassword\",\n        message: {\n            to: email,\n            subject: \"Értesítés a regisztrációról\"\n        },\n        locals: {\n            nev: name,\n            email: email,\n            url: `${url}?token=${mailToken}`\n        }\n    }\n}\n","import {createTransport} from 'nodemailer';\nimport {config} from \"../configuration/config\";\n\nexport const transporter = createTransport({\n    host: config.mailHost,\n    port: 465,\n    secure: true,\n    auth: {\n        user: config.senderEmail,\n        pass: config.senderPassword\n    },\n    tls: {\n        rejectUnauthorized: false\n    }\n});","import {Connection} from \"./services/connectMongo\";\r\nimport fileUpload from 'express-fileupload'\r\nimport express from 'express';\r\nimport bodyParser from 'body-parser'\r\nimport cors from 'cors';\r\nimport {router as articleRoutes} from './api/articles/routes'\r\nimport {router as courseRoutes} from './api/courses/routes'\r\nimport {router as organizationRoutes} from './api/organizations/routes'\r\nimport {router as usersRoutes} from './api/users/routes'\r\nimport {router as videosRoutes} from './api/videos/routes'\r\nimport {router as generalDataRoutes} from './api/votes/routes'\r\nimport {router as filesRoutes} from './api/files/routes'\r\nimport {router as overlaysRoutes} from './api/overlays/routes'\r\nimport {router as tasksRoutes} from './api/tasks/routes'\r\nimport {router as tagsRoutes} from './api/tags/routes'\r\nimport {router as groupsRoutes} from './api/groups/routes'\r\n\r\nConnection.connectToMongo()\r\n\r\nconst server = express();\r\n\r\nserver.use(bodyParser.json());\r\nserver.use(fileUpload());\r\nserver.use(cors());\r\n\r\nserver.use((req: express.Request, res: express.Response, next: () => void) => {\r\n    res.setHeader('Access-Control-Allow-Origin', '*');\r\n    res.setHeader('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept, Authorization');\r\n    res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PATCH, DELETE');\r\n    next();\r\n});\r\n\r\nserver.use('/articles', articleRoutes)\r\nserver.use('/courses', courseRoutes)\r\nserver.use('/groups', groupsRoutes)\r\nserver.use('/organizations', organizationRoutes)\r\nserver.use('/tags', tagsRoutes)\r\nserver.use('/tasks', tasksRoutes)\r\nserver.use('/upload', filesRoutes)\r\nserver.use('/overlays', overlaysRoutes)\r\nserver.use('/users', usersRoutes);\r\nserver.use('/videos', videosRoutes);\r\nserver.use('/votes', generalDataRoutes);\r\n\r\nserver.use(() => {\r\n    throw new Error('Nem létezik ilyen útvonal');\r\n});\r\n\r\nserver.use((error: express.Errback, req: express.Request, res: express.Response) => {\r\n    return res.status(500).send(error.toString());\r\n});\r\n\r\nconst port = process.env.PORT || 5000;\r\nserver.listen(port, function () {\r\n    console.log(`A szerver a(z) ${port}-s porton fut`)\r\n});\r\n\r\n","import {Request, Response, NextFunction} from \"express\";\n\nexport const checkRequest = (req: Request, res: Response, next: NextFunction, requestData: string[]) => {\n    let reqBodyType: \"query\" | \"body\";\n    if (req.route.methods.put || req.route.methods.patch || req.route.methods.post) {\n        reqBodyType = \"body\"\n    } else if (!req.route.methods.post) {\n        reqBodyType = \"query\"\n    }\n    requestData.map((data) => {\n        if (req[reqBodyType][data] === null || undefined || \"\") {\n            throw new Error(\"Nincs megadva \" + data)\n        }\n    })\n}\n","import {Request, Response, NextFunction} from \"express\";\n\nconst { Connection } = require('./connectMongo')\n\nexport const checkUser = async (req: Request, res: Response, next: NextFunction) => {\n    try {\n        const user = await Connection.db.collection(\"users\").findOne({\"userData.email\": req.body.email})\n        if (user) {\n            throw new Error('User already exist, please login instead.');\n        }\n    } catch (err) {\n        throw new Error('Signing up failed, please try again later.' + err);\n    }\n}","import {Db, MongoClient} from \"mongodb\";\r\nimport {config} from \"../configuration/config\";\r\n// @ts-ignore\r\n/*import tunnel from \"tunnel-ssh\"\r\n\r\nconst tunnelConfig = {\r\n    username: \"spenglermanfred\",\r\n    host: \"80.77.112.163\",\r\n    privateKey: require('fs').readFileSync('/Users/spenc/Documents/putty_id_rsa.ppk'),\r\n    agent : process.env.SSH_AUTH_SOCK,\r\n    passphrase: \"MrPeach243Cock*\",\r\n    dstPort: 27017,\r\n}*/\r\n\r\nclass Connection {\r\n    public static db: Db;\r\n    public static url: string;\r\n    public static options: object;\r\n\r\n    static connectToMongo() {\r\n        /*if ( this.db ) return Promise.resolve(this.db)\r\n        return tunnel(tunnelConfig, function (error: string, server: string) {\r\n            if(error){\r\n                console.log(\"SSH connection error: \" + error);\r\n            }\r\n            console.log(JSON.stringify(server))*/\r\n            MongoClient.connect(Connection.url, Connection.options, (err: any, client: { db: (databaseName: string) => any; }) => {\r\n                console.log(\"Mongodb csatlakoztatva\")\r\n                Connection.db = client.db(config.database.dbName)\r\n            })\r\n/*\r\n        });*/\r\n    }\r\n}\r\n\r\nConnection.url = `mongodb://localhost:27017/`\r\nConnection.options = {\r\n    bufferMaxEntries:   0,\r\n    useNewUrlParser:    true,\r\n    useUnifiedTopology: true,\r\n}\r\n\r\nexport {Connection}\r\n","import fs from \"fs\"\nconst {NodeSSH} = require('node-ssh')\nconst ssh = new NodeSSH()\nimport {config} from \"../configuration/config\";\nimport {UploadedFile} from \"express-fileupload\";\n\n\nexport const getFileExtension = (fileName: string) => {\n    console.log(\"FileName: \" + fileName)\n    return (fileName.substr(fileName.lastIndexOf('.') + 1))\n}\n\nexport const createFile = (file: UploadedFile, localpath: string, fileName: string) => {\n    //console.log(\"Ez a privateKey: \" + config.scpConfig.privateKey)\n    if (!fs.existsSync(\"./temp/\")){\n        fs.mkdir(\"./temp/\",{recursive: true}, err => {return err});\n    } else {\n        fs.mkdir(\"./temp/\",{recursive: true}, err => {return err});\n    }\n    file.mv('./temp/' + file.name.toLowerCase()).then(() => {\n        console.log(\"The file moved successfully\")\n    }).catch((e) => {\n        console.log(e)\n    })\n    ssh.connect(config.scpConfig).then(() => {\n        console.log(\"./temp/\" + file.name)\n        ssh.putFile(\"./temp/\" + file.name.toLowerCase(), localpath + \"/\" + fileName + \".\" + getFileExtension(file.name.toLowerCase()))\n            .then(() => {\n                fs.rm(\"./temp/\" + file.name.toLowerCase(), () => {\n                    console.log(\"Ideiglenes fájl törölve\")\n                })\n                console.log(\"File feltöltve\")\n            })\n            .catch((error: string) => {\n                console.log(error.toString())\n            })\n    }).catch((e: any) => console.log(e))\n    /*if (!fs.existsSync(path)){\n        fs.mkdir(path,{recursive: true}, err => {return err});\n    } else {\n        fs.mkdir(path,{recursive: true}, err => {return err});\n    }\n    file.mv(`${path}/${name}.${extension}`)\n    fs.rename('./',`${path}/${name}.${extension}`, (err) => {\n        throw new Error(\"A fájl feltöltése sikertelen: \" + err)\n    })*/\n}\n\nexport const searchImages = async (path: string) => {\n    return fs.readdirSync(path);\n}\n\n\n","import {ObjectID, ObjectId} from \"mongodb\";\r\n\r\nexport const flattenObject = function(ob: object) {\r\n    let toReturn = {};\r\n    let flatObject;\r\n    for (let i in ob) {\r\n        if (!ob.hasOwnProperty(i)) {\r\n            continue;\r\n        }\r\n        // @ts-ignore\r\n        if ((typeof ob[i]) === 'object') {\r\n            // @ts-ignore\r\n            flatObject = flattenObject(ob[i]);\r\n            for (let x in flatObject) {\r\n                if (!flatObject.hasOwnProperty(x)) {\r\n                    continue;\r\n                }\r\n                // @ts-ignore\r\n                toReturn[i + (isNaN(x) ? '.' + x : '')] = flatObject[x];\r\n            }\r\n        } else {\r\n            // @ts-ignore\r\n            toReturn[i] = ob[i];\r\n        }\r\n    }\r\n    return toReturn;\r\n};\r\n","import {Request, Response, NextFunction} from 'express'\nimport {config} from '../configuration/config';\nimport jwt from 'jsonwebtoken';\n\nexport const generateToken = async (req: Request, res: Response, next: NextFunction, userId: string, email: string): Promise<string> => {\n    console.log(userId, email)\n    return jwt.sign(\n            {userId: userId, email: email},\n            config.tokenMailSecret,\n            {expiresIn: '24h'}\n    );\n}\n","export const responseReducer = (responseStatus: number, responseText: string | object) => {\n    return {\n        responseStatus: responseStatus,\n        responseText: responseText\n    }\n}","module.exports = require(\"bcryptjs\");","module.exports = require(\"body-parser\");","module.exports = require(\"cors\");","module.exports = require(\"email-templates\");","module.exports = require(\"express\");","module.exports = require(\"express-fileupload\");","module.exports = require(\"fs\");","module.exports = require(\"jsonwebtoken\");","module.exports = require(\"mongodb\");","module.exports = require(\"node-ssh\");","module.exports = require(\"nodemailer\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(5505);\n"],"sourceRoot":""}