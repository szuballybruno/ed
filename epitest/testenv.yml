version: '3.3'

services:

  database:
    image: postgres
    restart: always
    environment:
      POSTGRES_PASSWORD: "${PGPASSWORD}"
      POSTGRES_USER: 'dev_service_user'
      POSTGRES_DB: 'localhostDB'
    volumes: 
      - ./init:/init
      - ./init/init-script.sh:/docker-entrypoint-initdb.d/init-database.sh
    expose:
      - 5432
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U dev_service_user -d localhostDB"]
      interval: 20s
      timeout: 5s
      retries: 5
    networks:
      - test_net

  server: 
    depends_on: 
      database: 
        condition: service_healthy
    restart: always
    environment:
      PGPASSWORD: "${PGPASSWORD}"
      IS_DOCKERIZED: 'true'
      ENV_NAME: 'epitest'
    expose: 
      - 5000
    healthcheck:
      test: ["CMD-SHELL", "curl --fail http://localhost:5000/misc/healthcheck || exit 1"]
      interval: 5s
      timeout: 10s
      retries: 5
    build: 
      context: ../
      dockerfile: ./packages/server-api/backend.Dockerfile
    networks:
      test_net: 
        aliases: 
          - epitest.api.epistogram.com

  client: 
    depends_on: 
      database: 
        condition: service_healthy
    restart: always
    expose: 
      - 80
    healthcheck:
      test: ["CMD-SHELL", "curl --fail http://epitest.epistogram.com || exit 1"]
      interval: 5s
      timeout: 10s
      retries: 5
    build: 
      context: ../
      dockerfile: ./packages/frontend/frontend.Dockerfile
      args: 
        - ENVIRONMENT_NAME=epitest
    networks:
      test_net: 
        aliases: 
          - epitest.epistogram.com
      
  tests-client: 
    depends_on: 
      client:
        condition: service_healthy
    environment:
      IS_DOCKERIZED: 'true'
    volumes: 
      - ./out:/app/packages/tests-client/cypress/videos
    build: 
      context: ../
      dockerfile: ./packages/tests-client/testsclient.Dockerfile
    networks:
      - test_net

networks:
  test_net:
    driver: bridge
      
  # tests-server: 
  #   depends_on: 
  #     server:
  #       condition: service_healthy
  #   environment:
  #     IS_DOCKERIZED: 'true'
  #   volumes: 
  #     - ./out:/app/packages/tests-server/logs
  #   build: 
  #     context: ../
  #     dockerfile::/app/packages/tests-server/tests.Dockerfile